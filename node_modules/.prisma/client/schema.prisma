datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  password  String
  email     String?   @unique
  birthdate DateTime?
  gender    Gender?
  weight    Float?
  height    Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  mealFoods            MealFood[] // Relation to MealFood
  cholesterolHistories CholesterolHistory[] // Relation to CholesterolHistory

  @@map("users")
}

enum Gender {
  male
  female
}

model Food {
  id                  Int      @id @default(autoincrement()) // Primary key
  food                String // Food name
  caloricValue        Float // Caloric value
  fat                 Float // Fat content
  saturatedFats       Float // Saturated fats
  monounsaturatedFats Float // Monounsaturated fats
  polyunsaturatedFats Float // Polyunsaturated fats
  carbohydrates       Float // Carbohydrates
  sugars              Float // Sugars
  protein             Float // Protein
  dietaryFiber        Float // Dietary fiber
  cholesterol         Float // Cholesterol
  sodium              Float // Sodium
  water               Float // Water content
  vitaminA            Float // Vitamin A
  vitaminB1           Float // Vitamin B1 (Thiamine)
  vitaminB11          Float // Vitamin B11 (Folic acid)
  vitaminB12          Float // Vitamin B12 (Cobalamin)
  vitaminB2           Float // Vitamin B2 (Riboflavin)
  vitaminB3           Float // Vitamin B3 (Niacin)
  vitaminB5           Float // Vitamin B5 (Pantothenic acid)
  vitaminB6           Float // Vitamin B6 (Pyridoxine)
  vitaminC            Float // Vitamin C
  vitaminD            Float // Vitamin D
  vitaminE            Float // Vitamin E
  vitaminK            Float // Vitamin K
  calcium             Float // Calcium
  copper              Float // Copper
  iron                Float // Iron
  magnesium           Float // Magnesium
  manganese           Float // Manganese
  phosphorus          Float // Phosphorus
  potassium           Float // Potassium
  selenium            Float // Selenium
  zinc                Float // Zinc
  nutritionDensity    Float // Nutrition density
  createdAt           DateTime @default(now()) // Timestamp for record creation
  updatedAt           DateTime @updatedAt // Timestamp for last update

  mealFoods MealFood[] // Relation to MealFood

  @@map("food")
}

model MealFood {
  id        Int      @id @default(autoincrement())
  userId    Int // Scalar field
  foodId    Int // Scalar field
  type      MealType
  time      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  food Food @relation(fields: [foodId], references: [id])

  @@map("meal_food")
}

enum MealType {
  Breakfast
  Lunch
  Dinner
  Snack
}

model CholesterolHistory {
  id        Int      @id @default(autoincrement())
  userId    Int // Scalar field
  number    Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("cholesterol_history")
}
