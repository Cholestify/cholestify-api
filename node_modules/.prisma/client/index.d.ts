
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Food
 * 
 */
export type Food = $Result.DefaultSelection<Prisma.$FoodPayload>
/**
 * Model MealFood
 * 
 */
export type MealFood = $Result.DefaultSelection<Prisma.$MealFoodPayload>
/**
 * Model CholesterolHistory
 * 
 */
export type CholesterolHistory = $Result.DefaultSelection<Prisma.$CholesterolHistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  male: 'male',
  female: 'female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const MealType: {
  Breakfast: 'Breakfast',
  Lunch: 'Lunch',
  Dinner: 'Dinner',
  Snack: 'Snack'
};

export type MealType = (typeof MealType)[keyof typeof MealType]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type MealType = $Enums.MealType

export const MealType: typeof $Enums.MealType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.food`: Exposes CRUD operations for the **Food** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Foods
    * const foods = await prisma.food.findMany()
    * ```
    */
  get food(): Prisma.FoodDelegate<ExtArgs>;

  /**
   * `prisma.mealFood`: Exposes CRUD operations for the **MealFood** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MealFoods
    * const mealFoods = await prisma.mealFood.findMany()
    * ```
    */
  get mealFood(): Prisma.MealFoodDelegate<ExtArgs>;

  /**
   * `prisma.cholesterolHistory`: Exposes CRUD operations for the **CholesterolHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CholesterolHistories
    * const cholesterolHistories = await prisma.cholesterolHistory.findMany()
    * ```
    */
  get cholesterolHistory(): Prisma.CholesterolHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Food: 'Food',
    MealFood: 'MealFood',
    CholesterolHistory: 'CholesterolHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "food" | "mealFood" | "cholesterolHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Food: {
        payload: Prisma.$FoodPayload<ExtArgs>
        fields: Prisma.FoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findFirst: {
            args: Prisma.FoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          findMany: {
            args: Prisma.FoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          create: {
            args: Prisma.FoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          createMany: {
            args: Prisma.FoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>[]
          }
          delete: {
            args: Prisma.FoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          update: {
            args: Prisma.FoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          deleteMany: {
            args: Prisma.FoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FoodPayload>
          }
          aggregate: {
            args: Prisma.FoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFood>
          }
          groupBy: {
            args: Prisma.FoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<FoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.FoodCountArgs<ExtArgs>
            result: $Utils.Optional<FoodCountAggregateOutputType> | number
          }
        }
      }
      MealFood: {
        payload: Prisma.$MealFoodPayload<ExtArgs>
        fields: Prisma.MealFoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MealFoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MealFoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>
          }
          findFirst: {
            args: Prisma.MealFoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MealFoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>
          }
          findMany: {
            args: Prisma.MealFoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>[]
          }
          create: {
            args: Prisma.MealFoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>
          }
          createMany: {
            args: Prisma.MealFoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MealFoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>[]
          }
          delete: {
            args: Prisma.MealFoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>
          }
          update: {
            args: Prisma.MealFoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>
          }
          deleteMany: {
            args: Prisma.MealFoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MealFoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MealFoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MealFoodPayload>
          }
          aggregate: {
            args: Prisma.MealFoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMealFood>
          }
          groupBy: {
            args: Prisma.MealFoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<MealFoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.MealFoodCountArgs<ExtArgs>
            result: $Utils.Optional<MealFoodCountAggregateOutputType> | number
          }
        }
      }
      CholesterolHistory: {
        payload: Prisma.$CholesterolHistoryPayload<ExtArgs>
        fields: Prisma.CholesterolHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CholesterolHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CholesterolHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>
          }
          findFirst: {
            args: Prisma.CholesterolHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CholesterolHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>
          }
          findMany: {
            args: Prisma.CholesterolHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>[]
          }
          create: {
            args: Prisma.CholesterolHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>
          }
          createMany: {
            args: Prisma.CholesterolHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CholesterolHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>[]
          }
          delete: {
            args: Prisma.CholesterolHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>
          }
          update: {
            args: Prisma.CholesterolHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>
          }
          deleteMany: {
            args: Prisma.CholesterolHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CholesterolHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CholesterolHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CholesterolHistoryPayload>
          }
          aggregate: {
            args: Prisma.CholesterolHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCholesterolHistory>
          }
          groupBy: {
            args: Prisma.CholesterolHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CholesterolHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CholesterolHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<CholesterolHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    mealFoods: number
    cholesterolHistories: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealFoods?: boolean | UserCountOutputTypeCountMealFoodsArgs
    cholesterolHistories?: boolean | UserCountOutputTypeCountCholesterolHistoriesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMealFoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealFoodWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCholesterolHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CholesterolHistoryWhereInput
  }


  /**
   * Count Type FoodCountOutputType
   */

  export type FoodCountOutputType = {
    mealFoods: number
  }

  export type FoodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealFoods?: boolean | FoodCountOutputTypeCountMealFoodsArgs
  }

  // Custom InputTypes
  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FoodCountOutputType
     */
    select?: FoodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FoodCountOutputType without action
   */
  export type FoodCountOutputTypeCountMealFoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealFoodWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    weight: number | null
    height: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    weight: number | null
    height: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    birthdate: Date | null
    gender: $Enums.Gender | null
    weight: number | null
    height: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    password: string | null
    email: string | null
    birthdate: Date | null
    gender: $Enums.Gender | null
    weight: number | null
    height: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    password: number
    email: number
    birthdate: number
    gender: number
    weight: number
    height: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    weight?: true
    height?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    weight?: true
    height?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    birthdate?: true
    gender?: true
    weight?: true
    height?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    birthdate?: true
    gender?: true
    weight?: true
    height?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    password?: true
    email?: true
    birthdate?: true
    gender?: true
    weight?: true
    height?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    password: string
    email: string | null
    birthdate: Date | null
    gender: $Enums.Gender | null
    weight: number | null
    height: number | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    birthdate?: boolean
    gender?: boolean
    weight?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mealFoods?: boolean | User$mealFoodsArgs<ExtArgs>
    cholesterolHistories?: boolean | User$cholesterolHistoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    birthdate?: boolean
    gender?: boolean
    weight?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    password?: boolean
    email?: boolean
    birthdate?: boolean
    gender?: boolean
    weight?: boolean
    height?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealFoods?: boolean | User$mealFoodsArgs<ExtArgs>
    cholesterolHistories?: boolean | User$cholesterolHistoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      mealFoods: Prisma.$MealFoodPayload<ExtArgs>[]
      cholesterolHistories: Prisma.$CholesterolHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      password: string
      email: string | null
      birthdate: Date | null
      gender: $Enums.Gender | null
      weight: number | null
      height: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mealFoods<T extends User$mealFoodsArgs<ExtArgs> = {}>(args?: Subset<T, User$mealFoodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findMany"> | Null>
    cholesterolHistories<T extends User$cholesterolHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$cholesterolHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly birthdate: FieldRef<"User", 'DateTime'>
    readonly gender: FieldRef<"User", 'Gender'>
    readonly weight: FieldRef<"User", 'Float'>
    readonly height: FieldRef<"User", 'Float'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.mealFoods
   */
  export type User$mealFoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    where?: MealFoodWhereInput
    orderBy?: MealFoodOrderByWithRelationInput | MealFoodOrderByWithRelationInput[]
    cursor?: MealFoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealFoodScalarFieldEnum | MealFoodScalarFieldEnum[]
  }

  /**
   * User.cholesterolHistories
   */
  export type User$cholesterolHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    where?: CholesterolHistoryWhereInput
    orderBy?: CholesterolHistoryOrderByWithRelationInput | CholesterolHistoryOrderByWithRelationInput[]
    cursor?: CholesterolHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CholesterolHistoryScalarFieldEnum | CholesterolHistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Food
   */

  export type AggregateFood = {
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  export type FoodAvgAggregateOutputType = {
    id: number | null
    caloricValue: number | null
    fat: number | null
    saturatedFats: number | null
    monounsaturatedFats: number | null
    polyunsaturatedFats: number | null
    carbohydrates: number | null
    sugars: number | null
    protein: number | null
    dietaryFiber: number | null
    cholesterol: number | null
    sodium: number | null
    water: number | null
    vitaminA: number | null
    vitaminB1: number | null
    vitaminB11: number | null
    vitaminB12: number | null
    vitaminB2: number | null
    vitaminB3: number | null
    vitaminB5: number | null
    vitaminB6: number | null
    vitaminC: number | null
    vitaminD: number | null
    vitaminE: number | null
    vitaminK: number | null
    calcium: number | null
    copper: number | null
    iron: number | null
    magnesium: number | null
    manganese: number | null
    phosphorus: number | null
    potassium: number | null
    selenium: number | null
    zinc: number | null
    nutritionDensity: number | null
  }

  export type FoodSumAggregateOutputType = {
    id: number | null
    caloricValue: number | null
    fat: number | null
    saturatedFats: number | null
    monounsaturatedFats: number | null
    polyunsaturatedFats: number | null
    carbohydrates: number | null
    sugars: number | null
    protein: number | null
    dietaryFiber: number | null
    cholesterol: number | null
    sodium: number | null
    water: number | null
    vitaminA: number | null
    vitaminB1: number | null
    vitaminB11: number | null
    vitaminB12: number | null
    vitaminB2: number | null
    vitaminB3: number | null
    vitaminB5: number | null
    vitaminB6: number | null
    vitaminC: number | null
    vitaminD: number | null
    vitaminE: number | null
    vitaminK: number | null
    calcium: number | null
    copper: number | null
    iron: number | null
    magnesium: number | null
    manganese: number | null
    phosphorus: number | null
    potassium: number | null
    selenium: number | null
    zinc: number | null
    nutritionDensity: number | null
  }

  export type FoodMinAggregateOutputType = {
    id: number | null
    food: string | null
    caloricValue: number | null
    fat: number | null
    saturatedFats: number | null
    monounsaturatedFats: number | null
    polyunsaturatedFats: number | null
    carbohydrates: number | null
    sugars: number | null
    protein: number | null
    dietaryFiber: number | null
    cholesterol: number | null
    sodium: number | null
    water: number | null
    vitaminA: number | null
    vitaminB1: number | null
    vitaminB11: number | null
    vitaminB12: number | null
    vitaminB2: number | null
    vitaminB3: number | null
    vitaminB5: number | null
    vitaminB6: number | null
    vitaminC: number | null
    vitaminD: number | null
    vitaminE: number | null
    vitaminK: number | null
    calcium: number | null
    copper: number | null
    iron: number | null
    magnesium: number | null
    manganese: number | null
    phosphorus: number | null
    potassium: number | null
    selenium: number | null
    zinc: number | null
    nutritionDensity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodMaxAggregateOutputType = {
    id: number | null
    food: string | null
    caloricValue: number | null
    fat: number | null
    saturatedFats: number | null
    monounsaturatedFats: number | null
    polyunsaturatedFats: number | null
    carbohydrates: number | null
    sugars: number | null
    protein: number | null
    dietaryFiber: number | null
    cholesterol: number | null
    sodium: number | null
    water: number | null
    vitaminA: number | null
    vitaminB1: number | null
    vitaminB11: number | null
    vitaminB12: number | null
    vitaminB2: number | null
    vitaminB3: number | null
    vitaminB5: number | null
    vitaminB6: number | null
    vitaminC: number | null
    vitaminD: number | null
    vitaminE: number | null
    vitaminK: number | null
    calcium: number | null
    copper: number | null
    iron: number | null
    magnesium: number | null
    manganese: number | null
    phosphorus: number | null
    potassium: number | null
    selenium: number | null
    zinc: number | null
    nutritionDensity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FoodCountAggregateOutputType = {
    id: number
    food: number
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FoodAvgAggregateInputType = {
    id?: true
    caloricValue?: true
    fat?: true
    saturatedFats?: true
    monounsaturatedFats?: true
    polyunsaturatedFats?: true
    carbohydrates?: true
    sugars?: true
    protein?: true
    dietaryFiber?: true
    cholesterol?: true
    sodium?: true
    water?: true
    vitaminA?: true
    vitaminB1?: true
    vitaminB11?: true
    vitaminB12?: true
    vitaminB2?: true
    vitaminB3?: true
    vitaminB5?: true
    vitaminB6?: true
    vitaminC?: true
    vitaminD?: true
    vitaminE?: true
    vitaminK?: true
    calcium?: true
    copper?: true
    iron?: true
    magnesium?: true
    manganese?: true
    phosphorus?: true
    potassium?: true
    selenium?: true
    zinc?: true
    nutritionDensity?: true
  }

  export type FoodSumAggregateInputType = {
    id?: true
    caloricValue?: true
    fat?: true
    saturatedFats?: true
    monounsaturatedFats?: true
    polyunsaturatedFats?: true
    carbohydrates?: true
    sugars?: true
    protein?: true
    dietaryFiber?: true
    cholesterol?: true
    sodium?: true
    water?: true
    vitaminA?: true
    vitaminB1?: true
    vitaminB11?: true
    vitaminB12?: true
    vitaminB2?: true
    vitaminB3?: true
    vitaminB5?: true
    vitaminB6?: true
    vitaminC?: true
    vitaminD?: true
    vitaminE?: true
    vitaminK?: true
    calcium?: true
    copper?: true
    iron?: true
    magnesium?: true
    manganese?: true
    phosphorus?: true
    potassium?: true
    selenium?: true
    zinc?: true
    nutritionDensity?: true
  }

  export type FoodMinAggregateInputType = {
    id?: true
    food?: true
    caloricValue?: true
    fat?: true
    saturatedFats?: true
    monounsaturatedFats?: true
    polyunsaturatedFats?: true
    carbohydrates?: true
    sugars?: true
    protein?: true
    dietaryFiber?: true
    cholesterol?: true
    sodium?: true
    water?: true
    vitaminA?: true
    vitaminB1?: true
    vitaminB11?: true
    vitaminB12?: true
    vitaminB2?: true
    vitaminB3?: true
    vitaminB5?: true
    vitaminB6?: true
    vitaminC?: true
    vitaminD?: true
    vitaminE?: true
    vitaminK?: true
    calcium?: true
    copper?: true
    iron?: true
    magnesium?: true
    manganese?: true
    phosphorus?: true
    potassium?: true
    selenium?: true
    zinc?: true
    nutritionDensity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodMaxAggregateInputType = {
    id?: true
    food?: true
    caloricValue?: true
    fat?: true
    saturatedFats?: true
    monounsaturatedFats?: true
    polyunsaturatedFats?: true
    carbohydrates?: true
    sugars?: true
    protein?: true
    dietaryFiber?: true
    cholesterol?: true
    sodium?: true
    water?: true
    vitaminA?: true
    vitaminB1?: true
    vitaminB11?: true
    vitaminB12?: true
    vitaminB2?: true
    vitaminB3?: true
    vitaminB5?: true
    vitaminB6?: true
    vitaminC?: true
    vitaminD?: true
    vitaminE?: true
    vitaminK?: true
    calcium?: true
    copper?: true
    iron?: true
    magnesium?: true
    manganese?: true
    phosphorus?: true
    potassium?: true
    selenium?: true
    zinc?: true
    nutritionDensity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FoodCountAggregateInputType = {
    id?: true
    food?: true
    caloricValue?: true
    fat?: true
    saturatedFats?: true
    monounsaturatedFats?: true
    polyunsaturatedFats?: true
    carbohydrates?: true
    sugars?: true
    protein?: true
    dietaryFiber?: true
    cholesterol?: true
    sodium?: true
    water?: true
    vitaminA?: true
    vitaminB1?: true
    vitaminB11?: true
    vitaminB12?: true
    vitaminB2?: true
    vitaminB3?: true
    vitaminB5?: true
    vitaminB6?: true
    vitaminC?: true
    vitaminD?: true
    vitaminE?: true
    vitaminK?: true
    calcium?: true
    copper?: true
    iron?: true
    magnesium?: true
    manganese?: true
    phosphorus?: true
    potassium?: true
    selenium?: true
    zinc?: true
    nutritionDensity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Food to aggregate.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Foods
    **/
    _count?: true | FoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FoodMaxAggregateInputType
  }

  export type GetFoodAggregateType<T extends FoodAggregateArgs> = {
        [P in keyof T & keyof AggregateFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFood[P]>
      : GetScalarType<T[P], AggregateFood[P]>
  }




  export type FoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FoodWhereInput
    orderBy?: FoodOrderByWithAggregationInput | FoodOrderByWithAggregationInput[]
    by: FoodScalarFieldEnum[] | FoodScalarFieldEnum
    having?: FoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FoodCountAggregateInputType | true
    _avg?: FoodAvgAggregateInputType
    _sum?: FoodSumAggregateInputType
    _min?: FoodMinAggregateInputType
    _max?: FoodMaxAggregateInputType
  }

  export type FoodGroupByOutputType = {
    id: number
    food: string
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt: Date
    updatedAt: Date
    _count: FoodCountAggregateOutputType | null
    _avg: FoodAvgAggregateOutputType | null
    _sum: FoodSumAggregateOutputType | null
    _min: FoodMinAggregateOutputType | null
    _max: FoodMaxAggregateOutputType | null
  }

  type GetFoodGroupByPayload<T extends FoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FoodGroupByOutputType[P]>
            : GetScalarType<T[P], FoodGroupByOutputType[P]>
        }
      >
    >


  export type FoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    food?: boolean
    caloricValue?: boolean
    fat?: boolean
    saturatedFats?: boolean
    monounsaturatedFats?: boolean
    polyunsaturatedFats?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    protein?: boolean
    dietaryFiber?: boolean
    cholesterol?: boolean
    sodium?: boolean
    water?: boolean
    vitaminA?: boolean
    vitaminB1?: boolean
    vitaminB11?: boolean
    vitaminB12?: boolean
    vitaminB2?: boolean
    vitaminB3?: boolean
    vitaminB5?: boolean
    vitaminB6?: boolean
    vitaminC?: boolean
    vitaminD?: boolean
    vitaminE?: boolean
    vitaminK?: boolean
    calcium?: boolean
    copper?: boolean
    iron?: boolean
    magnesium?: boolean
    manganese?: boolean
    phosphorus?: boolean
    potassium?: boolean
    selenium?: boolean
    zinc?: boolean
    nutritionDensity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mealFoods?: boolean | Food$mealFoodsArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["food"]>

  export type FoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    food?: boolean
    caloricValue?: boolean
    fat?: boolean
    saturatedFats?: boolean
    monounsaturatedFats?: boolean
    polyunsaturatedFats?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    protein?: boolean
    dietaryFiber?: boolean
    cholesterol?: boolean
    sodium?: boolean
    water?: boolean
    vitaminA?: boolean
    vitaminB1?: boolean
    vitaminB11?: boolean
    vitaminB12?: boolean
    vitaminB2?: boolean
    vitaminB3?: boolean
    vitaminB5?: boolean
    vitaminB6?: boolean
    vitaminC?: boolean
    vitaminD?: boolean
    vitaminE?: boolean
    vitaminK?: boolean
    calcium?: boolean
    copper?: boolean
    iron?: boolean
    magnesium?: boolean
    manganese?: boolean
    phosphorus?: boolean
    potassium?: boolean
    selenium?: boolean
    zinc?: boolean
    nutritionDensity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["food"]>

  export type FoodSelectScalar = {
    id?: boolean
    food?: boolean
    caloricValue?: boolean
    fat?: boolean
    saturatedFats?: boolean
    monounsaturatedFats?: boolean
    polyunsaturatedFats?: boolean
    carbohydrates?: boolean
    sugars?: boolean
    protein?: boolean
    dietaryFiber?: boolean
    cholesterol?: boolean
    sodium?: boolean
    water?: boolean
    vitaminA?: boolean
    vitaminB1?: boolean
    vitaminB11?: boolean
    vitaminB12?: boolean
    vitaminB2?: boolean
    vitaminB3?: boolean
    vitaminB5?: boolean
    vitaminB6?: boolean
    vitaminC?: boolean
    vitaminD?: boolean
    vitaminE?: boolean
    vitaminK?: boolean
    calcium?: boolean
    copper?: boolean
    iron?: boolean
    magnesium?: boolean
    manganese?: boolean
    phosphorus?: boolean
    potassium?: boolean
    selenium?: boolean
    zinc?: boolean
    nutritionDensity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mealFoods?: boolean | Food$mealFoodsArgs<ExtArgs>
    _count?: boolean | FoodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Food"
    objects: {
      mealFoods: Prisma.$MealFoodPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      food: string
      caloricValue: number
      fat: number
      saturatedFats: number
      monounsaturatedFats: number
      polyunsaturatedFats: number
      carbohydrates: number
      sugars: number
      protein: number
      dietaryFiber: number
      cholesterol: number
      sodium: number
      water: number
      vitaminA: number
      vitaminB1: number
      vitaminB11: number
      vitaminB12: number
      vitaminB2: number
      vitaminB3: number
      vitaminB5: number
      vitaminB6: number
      vitaminC: number
      vitaminD: number
      vitaminE: number
      vitaminK: number
      calcium: number
      copper: number
      iron: number
      magnesium: number
      manganese: number
      phosphorus: number
      potassium: number
      selenium: number
      zinc: number
      nutritionDensity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["food"]>
    composites: {}
  }

  type FoodGetPayload<S extends boolean | null | undefined | FoodDefaultArgs> = $Result.GetResult<Prisma.$FoodPayload, S>

  type FoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FoodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FoodCountAggregateInputType | true
    }

  export interface FoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Food'], meta: { name: 'Food' } }
    /**
     * Find zero or one Food that matches the filter.
     * @param {FoodFindUniqueArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FoodFindUniqueArgs>(args: SelectSubset<T, FoodFindUniqueArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Food that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FoodFindUniqueOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FoodFindUniqueOrThrowArgs>(args: SelectSubset<T, FoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Food that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FoodFindFirstArgs>(args?: SelectSubset<T, FoodFindFirstArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Food that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindFirstOrThrowArgs} args - Arguments to find a Food
     * @example
     * // Get one Food
     * const food = await prisma.food.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FoodFindFirstOrThrowArgs>(args?: SelectSubset<T, FoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Foods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Foods
     * const foods = await prisma.food.findMany()
     * 
     * // Get first 10 Foods
     * const foods = await prisma.food.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const foodWithIdOnly = await prisma.food.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FoodFindManyArgs>(args?: SelectSubset<T, FoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Food.
     * @param {FoodCreateArgs} args - Arguments to create a Food.
     * @example
     * // Create one Food
     * const Food = await prisma.food.create({
     *   data: {
     *     // ... data to create a Food
     *   }
     * })
     * 
     */
    create<T extends FoodCreateArgs>(args: SelectSubset<T, FoodCreateArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Foods.
     * @param {FoodCreateManyArgs} args - Arguments to create many Foods.
     * @example
     * // Create many Foods
     * const food = await prisma.food.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FoodCreateManyArgs>(args?: SelectSubset<T, FoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Foods and returns the data saved in the database.
     * @param {FoodCreateManyAndReturnArgs} args - Arguments to create many Foods.
     * @example
     * // Create many Foods
     * const food = await prisma.food.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Foods and only return the `id`
     * const foodWithIdOnly = await prisma.food.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FoodCreateManyAndReturnArgs>(args?: SelectSubset<T, FoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Food.
     * @param {FoodDeleteArgs} args - Arguments to delete one Food.
     * @example
     * // Delete one Food
     * const Food = await prisma.food.delete({
     *   where: {
     *     // ... filter to delete one Food
     *   }
     * })
     * 
     */
    delete<T extends FoodDeleteArgs>(args: SelectSubset<T, FoodDeleteArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Food.
     * @param {FoodUpdateArgs} args - Arguments to update one Food.
     * @example
     * // Update one Food
     * const food = await prisma.food.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FoodUpdateArgs>(args: SelectSubset<T, FoodUpdateArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Foods.
     * @param {FoodDeleteManyArgs} args - Arguments to filter Foods to delete.
     * @example
     * // Delete a few Foods
     * const { count } = await prisma.food.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FoodDeleteManyArgs>(args?: SelectSubset<T, FoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Foods
     * const food = await prisma.food.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FoodUpdateManyArgs>(args: SelectSubset<T, FoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Food.
     * @param {FoodUpsertArgs} args - Arguments to update or create a Food.
     * @example
     * // Update or create a Food
     * const food = await prisma.food.upsert({
     *   create: {
     *     // ... data to create a Food
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Food we want to update
     *   }
     * })
     */
    upsert<T extends FoodUpsertArgs>(args: SelectSubset<T, FoodUpsertArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Foods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodCountArgs} args - Arguments to filter Foods to count.
     * @example
     * // Count the number of Foods
     * const count = await prisma.food.count({
     *   where: {
     *     // ... the filter for the Foods we want to count
     *   }
     * })
    **/
    count<T extends FoodCountArgs>(
      args?: Subset<T, FoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FoodAggregateArgs>(args: Subset<T, FoodAggregateArgs>): Prisma.PrismaPromise<GetFoodAggregateType<T>>

    /**
     * Group by Food.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FoodGroupByArgs['orderBy'] }
        : { orderBy?: FoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Food model
   */
  readonly fields: FoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Food.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mealFoods<T extends Food$mealFoodsArgs<ExtArgs> = {}>(args?: Subset<T, Food$mealFoodsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Food model
   */ 
  interface FoodFieldRefs {
    readonly id: FieldRef<"Food", 'Int'>
    readonly food: FieldRef<"Food", 'String'>
    readonly caloricValue: FieldRef<"Food", 'Float'>
    readonly fat: FieldRef<"Food", 'Float'>
    readonly saturatedFats: FieldRef<"Food", 'Float'>
    readonly monounsaturatedFats: FieldRef<"Food", 'Float'>
    readonly polyunsaturatedFats: FieldRef<"Food", 'Float'>
    readonly carbohydrates: FieldRef<"Food", 'Float'>
    readonly sugars: FieldRef<"Food", 'Float'>
    readonly protein: FieldRef<"Food", 'Float'>
    readonly dietaryFiber: FieldRef<"Food", 'Float'>
    readonly cholesterol: FieldRef<"Food", 'Float'>
    readonly sodium: FieldRef<"Food", 'Float'>
    readonly water: FieldRef<"Food", 'Float'>
    readonly vitaminA: FieldRef<"Food", 'Float'>
    readonly vitaminB1: FieldRef<"Food", 'Float'>
    readonly vitaminB11: FieldRef<"Food", 'Float'>
    readonly vitaminB12: FieldRef<"Food", 'Float'>
    readonly vitaminB2: FieldRef<"Food", 'Float'>
    readonly vitaminB3: FieldRef<"Food", 'Float'>
    readonly vitaminB5: FieldRef<"Food", 'Float'>
    readonly vitaminB6: FieldRef<"Food", 'Float'>
    readonly vitaminC: FieldRef<"Food", 'Float'>
    readonly vitaminD: FieldRef<"Food", 'Float'>
    readonly vitaminE: FieldRef<"Food", 'Float'>
    readonly vitaminK: FieldRef<"Food", 'Float'>
    readonly calcium: FieldRef<"Food", 'Float'>
    readonly copper: FieldRef<"Food", 'Float'>
    readonly iron: FieldRef<"Food", 'Float'>
    readonly magnesium: FieldRef<"Food", 'Float'>
    readonly manganese: FieldRef<"Food", 'Float'>
    readonly phosphorus: FieldRef<"Food", 'Float'>
    readonly potassium: FieldRef<"Food", 'Float'>
    readonly selenium: FieldRef<"Food", 'Float'>
    readonly zinc: FieldRef<"Food", 'Float'>
    readonly nutritionDensity: FieldRef<"Food", 'Float'>
    readonly createdAt: FieldRef<"Food", 'DateTime'>
    readonly updatedAt: FieldRef<"Food", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Food findUnique
   */
  export type FoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food findUniqueOrThrow
   */
  export type FoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food findFirst
   */
  export type FoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food findFirstOrThrow
   */
  export type FoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Food to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Foods.
     */
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food findMany
   */
  export type FoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter, which Foods to fetch.
     */
    where?: FoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Foods to fetch.
     */
    orderBy?: FoodOrderByWithRelationInput | FoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Foods.
     */
    cursor?: FoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Foods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Foods.
     */
    skip?: number
    distinct?: FoodScalarFieldEnum | FoodScalarFieldEnum[]
  }

  /**
   * Food create
   */
  export type FoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Food.
     */
    data: XOR<FoodCreateInput, FoodUncheckedCreateInput>
  }

  /**
   * Food createMany
   */
  export type FoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Food createManyAndReturn
   */
  export type FoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Foods.
     */
    data: FoodCreateManyInput | FoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Food update
   */
  export type FoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Food.
     */
    data: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
    /**
     * Choose, which Food to update.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food updateMany
   */
  export type FoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Foods.
     */
    data: XOR<FoodUpdateManyMutationInput, FoodUncheckedUpdateManyInput>
    /**
     * Filter which Foods to update
     */
    where?: FoodWhereInput
  }

  /**
   * Food upsert
   */
  export type FoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Food to update in case it exists.
     */
    where: FoodWhereUniqueInput
    /**
     * In case the Food found by the `where` argument doesn't exist, create a new Food with this data.
     */
    create: XOR<FoodCreateInput, FoodUncheckedCreateInput>
    /**
     * In case the Food was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FoodUpdateInput, FoodUncheckedUpdateInput>
  }

  /**
   * Food delete
   */
  export type FoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
    /**
     * Filter which Food to delete.
     */
    where: FoodWhereUniqueInput
  }

  /**
   * Food deleteMany
   */
  export type FoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Foods to delete
     */
    where?: FoodWhereInput
  }

  /**
   * Food.mealFoods
   */
  export type Food$mealFoodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    where?: MealFoodWhereInput
    orderBy?: MealFoodOrderByWithRelationInput | MealFoodOrderByWithRelationInput[]
    cursor?: MealFoodWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MealFoodScalarFieldEnum | MealFoodScalarFieldEnum[]
  }

  /**
   * Food without action
   */
  export type FoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Food
     */
    select?: FoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FoodInclude<ExtArgs> | null
  }


  /**
   * Model MealFood
   */

  export type AggregateMealFood = {
    _count: MealFoodCountAggregateOutputType | null
    _avg: MealFoodAvgAggregateOutputType | null
    _sum: MealFoodSumAggregateOutputType | null
    _min: MealFoodMinAggregateOutputType | null
    _max: MealFoodMaxAggregateOutputType | null
  }

  export type MealFoodAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    foodId: number | null
  }

  export type MealFoodSumAggregateOutputType = {
    id: number | null
    userId: number | null
    foodId: number | null
  }

  export type MealFoodMinAggregateOutputType = {
    id: number | null
    userId: number | null
    foodId: number | null
    type: $Enums.MealType | null
    time: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealFoodMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    foodId: number | null
    type: $Enums.MealType | null
    time: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MealFoodCountAggregateOutputType = {
    id: number
    userId: number
    foodId: number
    type: number
    time: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MealFoodAvgAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
  }

  export type MealFoodSumAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
  }

  export type MealFoodMinAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    type?: true
    time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealFoodMaxAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    type?: true
    time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MealFoodCountAggregateInputType = {
    id?: true
    userId?: true
    foodId?: true
    type?: true
    time?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MealFoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealFood to aggregate.
     */
    where?: MealFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoods to fetch.
     */
    orderBy?: MealFoodOrderByWithRelationInput | MealFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MealFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MealFoods
    **/
    _count?: true | MealFoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MealFoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MealFoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MealFoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MealFoodMaxAggregateInputType
  }

  export type GetMealFoodAggregateType<T extends MealFoodAggregateArgs> = {
        [P in keyof T & keyof AggregateMealFood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMealFood[P]>
      : GetScalarType<T[P], AggregateMealFood[P]>
  }




  export type MealFoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MealFoodWhereInput
    orderBy?: MealFoodOrderByWithAggregationInput | MealFoodOrderByWithAggregationInput[]
    by: MealFoodScalarFieldEnum[] | MealFoodScalarFieldEnum
    having?: MealFoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MealFoodCountAggregateInputType | true
    _avg?: MealFoodAvgAggregateInputType
    _sum?: MealFoodSumAggregateInputType
    _min?: MealFoodMinAggregateInputType
    _max?: MealFoodMaxAggregateInputType
  }

  export type MealFoodGroupByOutputType = {
    id: number
    userId: number
    foodId: number
    type: $Enums.MealType
    time: Date
    createdAt: Date
    updatedAt: Date
    _count: MealFoodCountAggregateOutputType | null
    _avg: MealFoodAvgAggregateOutputType | null
    _sum: MealFoodSumAggregateOutputType | null
    _min: MealFoodMinAggregateOutputType | null
    _max: MealFoodMaxAggregateOutputType | null
  }

  type GetMealFoodGroupByPayload<T extends MealFoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MealFoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MealFoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MealFoodGroupByOutputType[P]>
            : GetScalarType<T[P], MealFoodGroupByOutputType[P]>
        }
      >
    >


  export type MealFoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    type?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealFood"]>

  export type MealFoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    foodId?: boolean
    type?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mealFood"]>

  export type MealFoodSelectScalar = {
    id?: boolean
    userId?: boolean
    foodId?: boolean
    type?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MealFoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }
  export type MealFoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    food?: boolean | FoodDefaultArgs<ExtArgs>
  }

  export type $MealFoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MealFood"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      food: Prisma.$FoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      foodId: number
      type: $Enums.MealType
      time: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["mealFood"]>
    composites: {}
  }

  type MealFoodGetPayload<S extends boolean | null | undefined | MealFoodDefaultArgs> = $Result.GetResult<Prisma.$MealFoodPayload, S>

  type MealFoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MealFoodFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MealFoodCountAggregateInputType | true
    }

  export interface MealFoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MealFood'], meta: { name: 'MealFood' } }
    /**
     * Find zero or one MealFood that matches the filter.
     * @param {MealFoodFindUniqueArgs} args - Arguments to find a MealFood
     * @example
     * // Get one MealFood
     * const mealFood = await prisma.mealFood.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MealFoodFindUniqueArgs>(args: SelectSubset<T, MealFoodFindUniqueArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MealFood that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MealFoodFindUniqueOrThrowArgs} args - Arguments to find a MealFood
     * @example
     * // Get one MealFood
     * const mealFood = await prisma.mealFood.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MealFoodFindUniqueOrThrowArgs>(args: SelectSubset<T, MealFoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MealFood that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodFindFirstArgs} args - Arguments to find a MealFood
     * @example
     * // Get one MealFood
     * const mealFood = await prisma.mealFood.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MealFoodFindFirstArgs>(args?: SelectSubset<T, MealFoodFindFirstArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MealFood that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodFindFirstOrThrowArgs} args - Arguments to find a MealFood
     * @example
     * // Get one MealFood
     * const mealFood = await prisma.mealFood.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MealFoodFindFirstOrThrowArgs>(args?: SelectSubset<T, MealFoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MealFoods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MealFoods
     * const mealFoods = await prisma.mealFood.findMany()
     * 
     * // Get first 10 MealFoods
     * const mealFoods = await prisma.mealFood.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mealFoodWithIdOnly = await prisma.mealFood.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MealFoodFindManyArgs>(args?: SelectSubset<T, MealFoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MealFood.
     * @param {MealFoodCreateArgs} args - Arguments to create a MealFood.
     * @example
     * // Create one MealFood
     * const MealFood = await prisma.mealFood.create({
     *   data: {
     *     // ... data to create a MealFood
     *   }
     * })
     * 
     */
    create<T extends MealFoodCreateArgs>(args: SelectSubset<T, MealFoodCreateArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MealFoods.
     * @param {MealFoodCreateManyArgs} args - Arguments to create many MealFoods.
     * @example
     * // Create many MealFoods
     * const mealFood = await prisma.mealFood.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MealFoodCreateManyArgs>(args?: SelectSubset<T, MealFoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MealFoods and returns the data saved in the database.
     * @param {MealFoodCreateManyAndReturnArgs} args - Arguments to create many MealFoods.
     * @example
     * // Create many MealFoods
     * const mealFood = await prisma.mealFood.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MealFoods and only return the `id`
     * const mealFoodWithIdOnly = await prisma.mealFood.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MealFoodCreateManyAndReturnArgs>(args?: SelectSubset<T, MealFoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MealFood.
     * @param {MealFoodDeleteArgs} args - Arguments to delete one MealFood.
     * @example
     * // Delete one MealFood
     * const MealFood = await prisma.mealFood.delete({
     *   where: {
     *     // ... filter to delete one MealFood
     *   }
     * })
     * 
     */
    delete<T extends MealFoodDeleteArgs>(args: SelectSubset<T, MealFoodDeleteArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MealFood.
     * @param {MealFoodUpdateArgs} args - Arguments to update one MealFood.
     * @example
     * // Update one MealFood
     * const mealFood = await prisma.mealFood.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MealFoodUpdateArgs>(args: SelectSubset<T, MealFoodUpdateArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MealFoods.
     * @param {MealFoodDeleteManyArgs} args - Arguments to filter MealFoods to delete.
     * @example
     * // Delete a few MealFoods
     * const { count } = await prisma.mealFood.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MealFoodDeleteManyArgs>(args?: SelectSubset<T, MealFoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MealFoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MealFoods
     * const mealFood = await prisma.mealFood.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MealFoodUpdateManyArgs>(args: SelectSubset<T, MealFoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MealFood.
     * @param {MealFoodUpsertArgs} args - Arguments to update or create a MealFood.
     * @example
     * // Update or create a MealFood
     * const mealFood = await prisma.mealFood.upsert({
     *   create: {
     *     // ... data to create a MealFood
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MealFood we want to update
     *   }
     * })
     */
    upsert<T extends MealFoodUpsertArgs>(args: SelectSubset<T, MealFoodUpsertArgs<ExtArgs>>): Prisma__MealFoodClient<$Result.GetResult<Prisma.$MealFoodPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MealFoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodCountArgs} args - Arguments to filter MealFoods to count.
     * @example
     * // Count the number of MealFoods
     * const count = await prisma.mealFood.count({
     *   where: {
     *     // ... the filter for the MealFoods we want to count
     *   }
     * })
    **/
    count<T extends MealFoodCountArgs>(
      args?: Subset<T, MealFoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MealFoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MealFood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MealFoodAggregateArgs>(args: Subset<T, MealFoodAggregateArgs>): Prisma.PrismaPromise<GetMealFoodAggregateType<T>>

    /**
     * Group by MealFood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MealFoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MealFoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MealFoodGroupByArgs['orderBy'] }
        : { orderBy?: MealFoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MealFoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMealFoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MealFood model
   */
  readonly fields: MealFoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MealFood.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MealFoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    food<T extends FoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FoodDefaultArgs<ExtArgs>>): Prisma__FoodClient<$Result.GetResult<Prisma.$FoodPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MealFood model
   */ 
  interface MealFoodFieldRefs {
    readonly id: FieldRef<"MealFood", 'Int'>
    readonly userId: FieldRef<"MealFood", 'Int'>
    readonly foodId: FieldRef<"MealFood", 'Int'>
    readonly type: FieldRef<"MealFood", 'MealType'>
    readonly time: FieldRef<"MealFood", 'DateTime'>
    readonly createdAt: FieldRef<"MealFood", 'DateTime'>
    readonly updatedAt: FieldRef<"MealFood", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MealFood findUnique
   */
  export type MealFoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * Filter, which MealFood to fetch.
     */
    where: MealFoodWhereUniqueInput
  }

  /**
   * MealFood findUniqueOrThrow
   */
  export type MealFoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * Filter, which MealFood to fetch.
     */
    where: MealFoodWhereUniqueInput
  }

  /**
   * MealFood findFirst
   */
  export type MealFoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * Filter, which MealFood to fetch.
     */
    where?: MealFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoods to fetch.
     */
    orderBy?: MealFoodOrderByWithRelationInput | MealFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealFoods.
     */
    cursor?: MealFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealFoods.
     */
    distinct?: MealFoodScalarFieldEnum | MealFoodScalarFieldEnum[]
  }

  /**
   * MealFood findFirstOrThrow
   */
  export type MealFoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * Filter, which MealFood to fetch.
     */
    where?: MealFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoods to fetch.
     */
    orderBy?: MealFoodOrderByWithRelationInput | MealFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MealFoods.
     */
    cursor?: MealFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MealFoods.
     */
    distinct?: MealFoodScalarFieldEnum | MealFoodScalarFieldEnum[]
  }

  /**
   * MealFood findMany
   */
  export type MealFoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * Filter, which MealFoods to fetch.
     */
    where?: MealFoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MealFoods to fetch.
     */
    orderBy?: MealFoodOrderByWithRelationInput | MealFoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MealFoods.
     */
    cursor?: MealFoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MealFoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MealFoods.
     */
    skip?: number
    distinct?: MealFoodScalarFieldEnum | MealFoodScalarFieldEnum[]
  }

  /**
   * MealFood create
   */
  export type MealFoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * The data needed to create a MealFood.
     */
    data: XOR<MealFoodCreateInput, MealFoodUncheckedCreateInput>
  }

  /**
   * MealFood createMany
   */
  export type MealFoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MealFoods.
     */
    data: MealFoodCreateManyInput | MealFoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MealFood createManyAndReturn
   */
  export type MealFoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MealFoods.
     */
    data: MealFoodCreateManyInput | MealFoodCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MealFood update
   */
  export type MealFoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * The data needed to update a MealFood.
     */
    data: XOR<MealFoodUpdateInput, MealFoodUncheckedUpdateInput>
    /**
     * Choose, which MealFood to update.
     */
    where: MealFoodWhereUniqueInput
  }

  /**
   * MealFood updateMany
   */
  export type MealFoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MealFoods.
     */
    data: XOR<MealFoodUpdateManyMutationInput, MealFoodUncheckedUpdateManyInput>
    /**
     * Filter which MealFoods to update
     */
    where?: MealFoodWhereInput
  }

  /**
   * MealFood upsert
   */
  export type MealFoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * The filter to search for the MealFood to update in case it exists.
     */
    where: MealFoodWhereUniqueInput
    /**
     * In case the MealFood found by the `where` argument doesn't exist, create a new MealFood with this data.
     */
    create: XOR<MealFoodCreateInput, MealFoodUncheckedCreateInput>
    /**
     * In case the MealFood was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MealFoodUpdateInput, MealFoodUncheckedUpdateInput>
  }

  /**
   * MealFood delete
   */
  export type MealFoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
    /**
     * Filter which MealFood to delete.
     */
    where: MealFoodWhereUniqueInput
  }

  /**
   * MealFood deleteMany
   */
  export type MealFoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MealFoods to delete
     */
    where?: MealFoodWhereInput
  }

  /**
   * MealFood without action
   */
  export type MealFoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MealFood
     */
    select?: MealFoodSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MealFoodInclude<ExtArgs> | null
  }


  /**
   * Model CholesterolHistory
   */

  export type AggregateCholesterolHistory = {
    _count: CholesterolHistoryCountAggregateOutputType | null
    _avg: CholesterolHistoryAvgAggregateOutputType | null
    _sum: CholesterolHistorySumAggregateOutputType | null
    _min: CholesterolHistoryMinAggregateOutputType | null
    _max: CholesterolHistoryMaxAggregateOutputType | null
  }

  export type CholesterolHistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    number: number | null
  }

  export type CholesterolHistorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    number: number | null
  }

  export type CholesterolHistoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    number: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CholesterolHistoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    number: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CholesterolHistoryCountAggregateOutputType = {
    id: number
    userId: number
    number: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CholesterolHistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    number?: true
  }

  export type CholesterolHistorySumAggregateInputType = {
    id?: true
    userId?: true
    number?: true
  }

  export type CholesterolHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    number?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CholesterolHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    number?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CholesterolHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    number?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CholesterolHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CholesterolHistory to aggregate.
     */
    where?: CholesterolHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CholesterolHistories to fetch.
     */
    orderBy?: CholesterolHistoryOrderByWithRelationInput | CholesterolHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CholesterolHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CholesterolHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CholesterolHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CholesterolHistories
    **/
    _count?: true | CholesterolHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CholesterolHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CholesterolHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CholesterolHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CholesterolHistoryMaxAggregateInputType
  }

  export type GetCholesterolHistoryAggregateType<T extends CholesterolHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCholesterolHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCholesterolHistory[P]>
      : GetScalarType<T[P], AggregateCholesterolHistory[P]>
  }




  export type CholesterolHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CholesterolHistoryWhereInput
    orderBy?: CholesterolHistoryOrderByWithAggregationInput | CholesterolHistoryOrderByWithAggregationInput[]
    by: CholesterolHistoryScalarFieldEnum[] | CholesterolHistoryScalarFieldEnum
    having?: CholesterolHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CholesterolHistoryCountAggregateInputType | true
    _avg?: CholesterolHistoryAvgAggregateInputType
    _sum?: CholesterolHistorySumAggregateInputType
    _min?: CholesterolHistoryMinAggregateInputType
    _max?: CholesterolHistoryMaxAggregateInputType
  }

  export type CholesterolHistoryGroupByOutputType = {
    id: number
    userId: number
    number: number
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: CholesterolHistoryCountAggregateOutputType | null
    _avg: CholesterolHistoryAvgAggregateOutputType | null
    _sum: CholesterolHistorySumAggregateOutputType | null
    _min: CholesterolHistoryMinAggregateOutputType | null
    _max: CholesterolHistoryMaxAggregateOutputType | null
  }

  type GetCholesterolHistoryGroupByPayload<T extends CholesterolHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CholesterolHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CholesterolHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CholesterolHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], CholesterolHistoryGroupByOutputType[P]>
        }
      >
    >


  export type CholesterolHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    number?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cholesterolHistory"]>

  export type CholesterolHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    number?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cholesterolHistory"]>

  export type CholesterolHistorySelectScalar = {
    id?: boolean
    userId?: boolean
    number?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CholesterolHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CholesterolHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CholesterolHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CholesterolHistory"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      number: number
      date: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cholesterolHistory"]>
    composites: {}
  }

  type CholesterolHistoryGetPayload<S extends boolean | null | undefined | CholesterolHistoryDefaultArgs> = $Result.GetResult<Prisma.$CholesterolHistoryPayload, S>

  type CholesterolHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CholesterolHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CholesterolHistoryCountAggregateInputType | true
    }

  export interface CholesterolHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CholesterolHistory'], meta: { name: 'CholesterolHistory' } }
    /**
     * Find zero or one CholesterolHistory that matches the filter.
     * @param {CholesterolHistoryFindUniqueArgs} args - Arguments to find a CholesterolHistory
     * @example
     * // Get one CholesterolHistory
     * const cholesterolHistory = await prisma.cholesterolHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CholesterolHistoryFindUniqueArgs>(args: SelectSubset<T, CholesterolHistoryFindUniqueArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CholesterolHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CholesterolHistoryFindUniqueOrThrowArgs} args - Arguments to find a CholesterolHistory
     * @example
     * // Get one CholesterolHistory
     * const cholesterolHistory = await prisma.cholesterolHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CholesterolHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CholesterolHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CholesterolHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryFindFirstArgs} args - Arguments to find a CholesterolHistory
     * @example
     * // Get one CholesterolHistory
     * const cholesterolHistory = await prisma.cholesterolHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CholesterolHistoryFindFirstArgs>(args?: SelectSubset<T, CholesterolHistoryFindFirstArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CholesterolHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryFindFirstOrThrowArgs} args - Arguments to find a CholesterolHistory
     * @example
     * // Get one CholesterolHistory
     * const cholesterolHistory = await prisma.cholesterolHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CholesterolHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CholesterolHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CholesterolHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CholesterolHistories
     * const cholesterolHistories = await prisma.cholesterolHistory.findMany()
     * 
     * // Get first 10 CholesterolHistories
     * const cholesterolHistories = await prisma.cholesterolHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cholesterolHistoryWithIdOnly = await prisma.cholesterolHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CholesterolHistoryFindManyArgs>(args?: SelectSubset<T, CholesterolHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CholesterolHistory.
     * @param {CholesterolHistoryCreateArgs} args - Arguments to create a CholesterolHistory.
     * @example
     * // Create one CholesterolHistory
     * const CholesterolHistory = await prisma.cholesterolHistory.create({
     *   data: {
     *     // ... data to create a CholesterolHistory
     *   }
     * })
     * 
     */
    create<T extends CholesterolHistoryCreateArgs>(args: SelectSubset<T, CholesterolHistoryCreateArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CholesterolHistories.
     * @param {CholesterolHistoryCreateManyArgs} args - Arguments to create many CholesterolHistories.
     * @example
     * // Create many CholesterolHistories
     * const cholesterolHistory = await prisma.cholesterolHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CholesterolHistoryCreateManyArgs>(args?: SelectSubset<T, CholesterolHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CholesterolHistories and returns the data saved in the database.
     * @param {CholesterolHistoryCreateManyAndReturnArgs} args - Arguments to create many CholesterolHistories.
     * @example
     * // Create many CholesterolHistories
     * const cholesterolHistory = await prisma.cholesterolHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CholesterolHistories and only return the `id`
     * const cholesterolHistoryWithIdOnly = await prisma.cholesterolHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CholesterolHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CholesterolHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CholesterolHistory.
     * @param {CholesterolHistoryDeleteArgs} args - Arguments to delete one CholesterolHistory.
     * @example
     * // Delete one CholesterolHistory
     * const CholesterolHistory = await prisma.cholesterolHistory.delete({
     *   where: {
     *     // ... filter to delete one CholesterolHistory
     *   }
     * })
     * 
     */
    delete<T extends CholesterolHistoryDeleteArgs>(args: SelectSubset<T, CholesterolHistoryDeleteArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CholesterolHistory.
     * @param {CholesterolHistoryUpdateArgs} args - Arguments to update one CholesterolHistory.
     * @example
     * // Update one CholesterolHistory
     * const cholesterolHistory = await prisma.cholesterolHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CholesterolHistoryUpdateArgs>(args: SelectSubset<T, CholesterolHistoryUpdateArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CholesterolHistories.
     * @param {CholesterolHistoryDeleteManyArgs} args - Arguments to filter CholesterolHistories to delete.
     * @example
     * // Delete a few CholesterolHistories
     * const { count } = await prisma.cholesterolHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CholesterolHistoryDeleteManyArgs>(args?: SelectSubset<T, CholesterolHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CholesterolHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CholesterolHistories
     * const cholesterolHistory = await prisma.cholesterolHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CholesterolHistoryUpdateManyArgs>(args: SelectSubset<T, CholesterolHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CholesterolHistory.
     * @param {CholesterolHistoryUpsertArgs} args - Arguments to update or create a CholesterolHistory.
     * @example
     * // Update or create a CholesterolHistory
     * const cholesterolHistory = await prisma.cholesterolHistory.upsert({
     *   create: {
     *     // ... data to create a CholesterolHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CholesterolHistory we want to update
     *   }
     * })
     */
    upsert<T extends CholesterolHistoryUpsertArgs>(args: SelectSubset<T, CholesterolHistoryUpsertArgs<ExtArgs>>): Prisma__CholesterolHistoryClient<$Result.GetResult<Prisma.$CholesterolHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CholesterolHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryCountArgs} args - Arguments to filter CholesterolHistories to count.
     * @example
     * // Count the number of CholesterolHistories
     * const count = await prisma.cholesterolHistory.count({
     *   where: {
     *     // ... the filter for the CholesterolHistories we want to count
     *   }
     * })
    **/
    count<T extends CholesterolHistoryCountArgs>(
      args?: Subset<T, CholesterolHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CholesterolHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CholesterolHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CholesterolHistoryAggregateArgs>(args: Subset<T, CholesterolHistoryAggregateArgs>): Prisma.PrismaPromise<GetCholesterolHistoryAggregateType<T>>

    /**
     * Group by CholesterolHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CholesterolHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CholesterolHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CholesterolHistoryGroupByArgs['orderBy'] }
        : { orderBy?: CholesterolHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CholesterolHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCholesterolHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CholesterolHistory model
   */
  readonly fields: CholesterolHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CholesterolHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CholesterolHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CholesterolHistory model
   */ 
  interface CholesterolHistoryFieldRefs {
    readonly id: FieldRef<"CholesterolHistory", 'Int'>
    readonly userId: FieldRef<"CholesterolHistory", 'Int'>
    readonly number: FieldRef<"CholesterolHistory", 'Int'>
    readonly date: FieldRef<"CholesterolHistory", 'DateTime'>
    readonly createdAt: FieldRef<"CholesterolHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"CholesterolHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CholesterolHistory findUnique
   */
  export type CholesterolHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CholesterolHistory to fetch.
     */
    where: CholesterolHistoryWhereUniqueInput
  }

  /**
   * CholesterolHistory findUniqueOrThrow
   */
  export type CholesterolHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CholesterolHistory to fetch.
     */
    where: CholesterolHistoryWhereUniqueInput
  }

  /**
   * CholesterolHistory findFirst
   */
  export type CholesterolHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CholesterolHistory to fetch.
     */
    where?: CholesterolHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CholesterolHistories to fetch.
     */
    orderBy?: CholesterolHistoryOrderByWithRelationInput | CholesterolHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CholesterolHistories.
     */
    cursor?: CholesterolHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CholesterolHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CholesterolHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CholesterolHistories.
     */
    distinct?: CholesterolHistoryScalarFieldEnum | CholesterolHistoryScalarFieldEnum[]
  }

  /**
   * CholesterolHistory findFirstOrThrow
   */
  export type CholesterolHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CholesterolHistory to fetch.
     */
    where?: CholesterolHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CholesterolHistories to fetch.
     */
    orderBy?: CholesterolHistoryOrderByWithRelationInput | CholesterolHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CholesterolHistories.
     */
    cursor?: CholesterolHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CholesterolHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CholesterolHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CholesterolHistories.
     */
    distinct?: CholesterolHistoryScalarFieldEnum | CholesterolHistoryScalarFieldEnum[]
  }

  /**
   * CholesterolHistory findMany
   */
  export type CholesterolHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CholesterolHistories to fetch.
     */
    where?: CholesterolHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CholesterolHistories to fetch.
     */
    orderBy?: CholesterolHistoryOrderByWithRelationInput | CholesterolHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CholesterolHistories.
     */
    cursor?: CholesterolHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CholesterolHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CholesterolHistories.
     */
    skip?: number
    distinct?: CholesterolHistoryScalarFieldEnum | CholesterolHistoryScalarFieldEnum[]
  }

  /**
   * CholesterolHistory create
   */
  export type CholesterolHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CholesterolHistory.
     */
    data: XOR<CholesterolHistoryCreateInput, CholesterolHistoryUncheckedCreateInput>
  }

  /**
   * CholesterolHistory createMany
   */
  export type CholesterolHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CholesterolHistories.
     */
    data: CholesterolHistoryCreateManyInput | CholesterolHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CholesterolHistory createManyAndReturn
   */
  export type CholesterolHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CholesterolHistories.
     */
    data: CholesterolHistoryCreateManyInput | CholesterolHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CholesterolHistory update
   */
  export type CholesterolHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CholesterolHistory.
     */
    data: XOR<CholesterolHistoryUpdateInput, CholesterolHistoryUncheckedUpdateInput>
    /**
     * Choose, which CholesterolHistory to update.
     */
    where: CholesterolHistoryWhereUniqueInput
  }

  /**
   * CholesterolHistory updateMany
   */
  export type CholesterolHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CholesterolHistories.
     */
    data: XOR<CholesterolHistoryUpdateManyMutationInput, CholesterolHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CholesterolHistories to update
     */
    where?: CholesterolHistoryWhereInput
  }

  /**
   * CholesterolHistory upsert
   */
  export type CholesterolHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CholesterolHistory to update in case it exists.
     */
    where: CholesterolHistoryWhereUniqueInput
    /**
     * In case the CholesterolHistory found by the `where` argument doesn't exist, create a new CholesterolHistory with this data.
     */
    create: XOR<CholesterolHistoryCreateInput, CholesterolHistoryUncheckedCreateInput>
    /**
     * In case the CholesterolHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CholesterolHistoryUpdateInput, CholesterolHistoryUncheckedUpdateInput>
  }

  /**
   * CholesterolHistory delete
   */
  export type CholesterolHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
    /**
     * Filter which CholesterolHistory to delete.
     */
    where: CholesterolHistoryWhereUniqueInput
  }

  /**
   * CholesterolHistory deleteMany
   */
  export type CholesterolHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CholesterolHistories to delete
     */
    where?: CholesterolHistoryWhereInput
  }

  /**
   * CholesterolHistory without action
   */
  export type CholesterolHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CholesterolHistory
     */
    select?: CholesterolHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CholesterolHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    password: 'password',
    email: 'email',
    birthdate: 'birthdate',
    gender: 'gender',
    weight: 'weight',
    height: 'height',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FoodScalarFieldEnum: {
    id: 'id',
    food: 'food',
    caloricValue: 'caloricValue',
    fat: 'fat',
    saturatedFats: 'saturatedFats',
    monounsaturatedFats: 'monounsaturatedFats',
    polyunsaturatedFats: 'polyunsaturatedFats',
    carbohydrates: 'carbohydrates',
    sugars: 'sugars',
    protein: 'protein',
    dietaryFiber: 'dietaryFiber',
    cholesterol: 'cholesterol',
    sodium: 'sodium',
    water: 'water',
    vitaminA: 'vitaminA',
    vitaminB1: 'vitaminB1',
    vitaminB11: 'vitaminB11',
    vitaminB12: 'vitaminB12',
    vitaminB2: 'vitaminB2',
    vitaminB3: 'vitaminB3',
    vitaminB5: 'vitaminB5',
    vitaminB6: 'vitaminB6',
    vitaminC: 'vitaminC',
    vitaminD: 'vitaminD',
    vitaminE: 'vitaminE',
    vitaminK: 'vitaminK',
    calcium: 'calcium',
    copper: 'copper',
    iron: 'iron',
    magnesium: 'magnesium',
    manganese: 'manganese',
    phosphorus: 'phosphorus',
    potassium: 'potassium',
    selenium: 'selenium',
    zinc: 'zinc',
    nutritionDensity: 'nutritionDensity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FoodScalarFieldEnum = (typeof FoodScalarFieldEnum)[keyof typeof FoodScalarFieldEnum]


  export const MealFoodScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    foodId: 'foodId',
    type: 'type',
    time: 'time',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MealFoodScalarFieldEnum = (typeof MealFoodScalarFieldEnum)[keyof typeof MealFoodScalarFieldEnum]


  export const CholesterolHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    number: 'number',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CholesterolHistoryScalarFieldEnum = (typeof CholesterolHistoryScalarFieldEnum)[keyof typeof CholesterolHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'MealType'
   */
  export type EnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType'>
    


  /**
   * Reference to a field of type 'MealType[]'
   */
  export type ListEnumMealTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MealType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    birthdate?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    weight?: FloatNullableFilter<"User"> | number | null
    height?: FloatNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    mealFoods?: MealFoodListRelationFilter
    cholesterolHistories?: CholesterolHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    birthdate?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mealFoods?: MealFoodOrderByRelationAggregateInput
    cholesterolHistories?: CholesterolHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    birthdate?: DateTimeNullableFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableFilter<"User"> | $Enums.Gender | null
    weight?: FloatNullableFilter<"User"> | number | null
    height?: FloatNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    mealFoods?: MealFoodListRelationFilter
    cholesterolHistories?: CholesterolHistoryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrderInput | SortOrder
    birthdate?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthdate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"User"> | $Enums.Gender | null
    weight?: FloatNullableWithAggregatesFilter<"User"> | number | null
    height?: FloatNullableWithAggregatesFilter<"User"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FoodWhereInput = {
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    id?: IntFilter<"Food"> | number
    food?: StringFilter<"Food"> | string
    caloricValue?: FloatFilter<"Food"> | number
    fat?: FloatFilter<"Food"> | number
    saturatedFats?: FloatFilter<"Food"> | number
    monounsaturatedFats?: FloatFilter<"Food"> | number
    polyunsaturatedFats?: FloatFilter<"Food"> | number
    carbohydrates?: FloatFilter<"Food"> | number
    sugars?: FloatFilter<"Food"> | number
    protein?: FloatFilter<"Food"> | number
    dietaryFiber?: FloatFilter<"Food"> | number
    cholesterol?: FloatFilter<"Food"> | number
    sodium?: FloatFilter<"Food"> | number
    water?: FloatFilter<"Food"> | number
    vitaminA?: FloatFilter<"Food"> | number
    vitaminB1?: FloatFilter<"Food"> | number
    vitaminB11?: FloatFilter<"Food"> | number
    vitaminB12?: FloatFilter<"Food"> | number
    vitaminB2?: FloatFilter<"Food"> | number
    vitaminB3?: FloatFilter<"Food"> | number
    vitaminB5?: FloatFilter<"Food"> | number
    vitaminB6?: FloatFilter<"Food"> | number
    vitaminC?: FloatFilter<"Food"> | number
    vitaminD?: FloatFilter<"Food"> | number
    vitaminE?: FloatFilter<"Food"> | number
    vitaminK?: FloatFilter<"Food"> | number
    calcium?: FloatFilter<"Food"> | number
    copper?: FloatFilter<"Food"> | number
    iron?: FloatFilter<"Food"> | number
    magnesium?: FloatFilter<"Food"> | number
    manganese?: FloatFilter<"Food"> | number
    phosphorus?: FloatFilter<"Food"> | number
    potassium?: FloatFilter<"Food"> | number
    selenium?: FloatFilter<"Food"> | number
    zinc?: FloatFilter<"Food"> | number
    nutritionDensity?: FloatFilter<"Food"> | number
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
    mealFoods?: MealFoodListRelationFilter
  }

  export type FoodOrderByWithRelationInput = {
    id?: SortOrder
    food?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mealFoods?: MealFoodOrderByRelationAggregateInput
  }

  export type FoodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FoodWhereInput | FoodWhereInput[]
    OR?: FoodWhereInput[]
    NOT?: FoodWhereInput | FoodWhereInput[]
    food?: StringFilter<"Food"> | string
    caloricValue?: FloatFilter<"Food"> | number
    fat?: FloatFilter<"Food"> | number
    saturatedFats?: FloatFilter<"Food"> | number
    monounsaturatedFats?: FloatFilter<"Food"> | number
    polyunsaturatedFats?: FloatFilter<"Food"> | number
    carbohydrates?: FloatFilter<"Food"> | number
    sugars?: FloatFilter<"Food"> | number
    protein?: FloatFilter<"Food"> | number
    dietaryFiber?: FloatFilter<"Food"> | number
    cholesterol?: FloatFilter<"Food"> | number
    sodium?: FloatFilter<"Food"> | number
    water?: FloatFilter<"Food"> | number
    vitaminA?: FloatFilter<"Food"> | number
    vitaminB1?: FloatFilter<"Food"> | number
    vitaminB11?: FloatFilter<"Food"> | number
    vitaminB12?: FloatFilter<"Food"> | number
    vitaminB2?: FloatFilter<"Food"> | number
    vitaminB3?: FloatFilter<"Food"> | number
    vitaminB5?: FloatFilter<"Food"> | number
    vitaminB6?: FloatFilter<"Food"> | number
    vitaminC?: FloatFilter<"Food"> | number
    vitaminD?: FloatFilter<"Food"> | number
    vitaminE?: FloatFilter<"Food"> | number
    vitaminK?: FloatFilter<"Food"> | number
    calcium?: FloatFilter<"Food"> | number
    copper?: FloatFilter<"Food"> | number
    iron?: FloatFilter<"Food"> | number
    magnesium?: FloatFilter<"Food"> | number
    manganese?: FloatFilter<"Food"> | number
    phosphorus?: FloatFilter<"Food"> | number
    potassium?: FloatFilter<"Food"> | number
    selenium?: FloatFilter<"Food"> | number
    zinc?: FloatFilter<"Food"> | number
    nutritionDensity?: FloatFilter<"Food"> | number
    createdAt?: DateTimeFilter<"Food"> | Date | string
    updatedAt?: DateTimeFilter<"Food"> | Date | string
    mealFoods?: MealFoodListRelationFilter
  }, "id">

  export type FoodOrderByWithAggregationInput = {
    id?: SortOrder
    food?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FoodCountOrderByAggregateInput
    _avg?: FoodAvgOrderByAggregateInput
    _max?: FoodMaxOrderByAggregateInput
    _min?: FoodMinOrderByAggregateInput
    _sum?: FoodSumOrderByAggregateInput
  }

  export type FoodScalarWhereWithAggregatesInput = {
    AND?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    OR?: FoodScalarWhereWithAggregatesInput[]
    NOT?: FoodScalarWhereWithAggregatesInput | FoodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Food"> | number
    food?: StringWithAggregatesFilter<"Food"> | string
    caloricValue?: FloatWithAggregatesFilter<"Food"> | number
    fat?: FloatWithAggregatesFilter<"Food"> | number
    saturatedFats?: FloatWithAggregatesFilter<"Food"> | number
    monounsaturatedFats?: FloatWithAggregatesFilter<"Food"> | number
    polyunsaturatedFats?: FloatWithAggregatesFilter<"Food"> | number
    carbohydrates?: FloatWithAggregatesFilter<"Food"> | number
    sugars?: FloatWithAggregatesFilter<"Food"> | number
    protein?: FloatWithAggregatesFilter<"Food"> | number
    dietaryFiber?: FloatWithAggregatesFilter<"Food"> | number
    cholesterol?: FloatWithAggregatesFilter<"Food"> | number
    sodium?: FloatWithAggregatesFilter<"Food"> | number
    water?: FloatWithAggregatesFilter<"Food"> | number
    vitaminA?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB1?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB11?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB12?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB2?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB3?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB5?: FloatWithAggregatesFilter<"Food"> | number
    vitaminB6?: FloatWithAggregatesFilter<"Food"> | number
    vitaminC?: FloatWithAggregatesFilter<"Food"> | number
    vitaminD?: FloatWithAggregatesFilter<"Food"> | number
    vitaminE?: FloatWithAggregatesFilter<"Food"> | number
    vitaminK?: FloatWithAggregatesFilter<"Food"> | number
    calcium?: FloatWithAggregatesFilter<"Food"> | number
    copper?: FloatWithAggregatesFilter<"Food"> | number
    iron?: FloatWithAggregatesFilter<"Food"> | number
    magnesium?: FloatWithAggregatesFilter<"Food"> | number
    manganese?: FloatWithAggregatesFilter<"Food"> | number
    phosphorus?: FloatWithAggregatesFilter<"Food"> | number
    potassium?: FloatWithAggregatesFilter<"Food"> | number
    selenium?: FloatWithAggregatesFilter<"Food"> | number
    zinc?: FloatWithAggregatesFilter<"Food"> | number
    nutritionDensity?: FloatWithAggregatesFilter<"Food"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Food"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Food"> | Date | string
  }

  export type MealFoodWhereInput = {
    AND?: MealFoodWhereInput | MealFoodWhereInput[]
    OR?: MealFoodWhereInput[]
    NOT?: MealFoodWhereInput | MealFoodWhereInput[]
    id?: IntFilter<"MealFood"> | number
    userId?: IntFilter<"MealFood"> | number
    foodId?: IntFilter<"MealFood"> | number
    type?: EnumMealTypeFilter<"MealFood"> | $Enums.MealType
    time?: DateTimeFilter<"MealFood"> | Date | string
    createdAt?: DateTimeFilter<"MealFood"> | Date | string
    updatedAt?: DateTimeFilter<"MealFood"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }

  export type MealFoodOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    food?: FoodOrderByWithRelationInput
  }

  export type MealFoodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MealFoodWhereInput | MealFoodWhereInput[]
    OR?: MealFoodWhereInput[]
    NOT?: MealFoodWhereInput | MealFoodWhereInput[]
    userId?: IntFilter<"MealFood"> | number
    foodId?: IntFilter<"MealFood"> | number
    type?: EnumMealTypeFilter<"MealFood"> | $Enums.MealType
    time?: DateTimeFilter<"MealFood"> | Date | string
    createdAt?: DateTimeFilter<"MealFood"> | Date | string
    updatedAt?: DateTimeFilter<"MealFood"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    food?: XOR<FoodRelationFilter, FoodWhereInput>
  }, "id">

  export type MealFoodOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MealFoodCountOrderByAggregateInput
    _avg?: MealFoodAvgOrderByAggregateInput
    _max?: MealFoodMaxOrderByAggregateInput
    _min?: MealFoodMinOrderByAggregateInput
    _sum?: MealFoodSumOrderByAggregateInput
  }

  export type MealFoodScalarWhereWithAggregatesInput = {
    AND?: MealFoodScalarWhereWithAggregatesInput | MealFoodScalarWhereWithAggregatesInput[]
    OR?: MealFoodScalarWhereWithAggregatesInput[]
    NOT?: MealFoodScalarWhereWithAggregatesInput | MealFoodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MealFood"> | number
    userId?: IntWithAggregatesFilter<"MealFood"> | number
    foodId?: IntWithAggregatesFilter<"MealFood"> | number
    type?: EnumMealTypeWithAggregatesFilter<"MealFood"> | $Enums.MealType
    time?: DateTimeWithAggregatesFilter<"MealFood"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MealFood"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MealFood"> | Date | string
  }

  export type CholesterolHistoryWhereInput = {
    AND?: CholesterolHistoryWhereInput | CholesterolHistoryWhereInput[]
    OR?: CholesterolHistoryWhereInput[]
    NOT?: CholesterolHistoryWhereInput | CholesterolHistoryWhereInput[]
    id?: IntFilter<"CholesterolHistory"> | number
    userId?: IntFilter<"CholesterolHistory"> | number
    number?: IntFilter<"CholesterolHistory"> | number
    date?: DateTimeFilter<"CholesterolHistory"> | Date | string
    createdAt?: DateTimeFilter<"CholesterolHistory"> | Date | string
    updatedAt?: DateTimeFilter<"CholesterolHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CholesterolHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CholesterolHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CholesterolHistoryWhereInput | CholesterolHistoryWhereInput[]
    OR?: CholesterolHistoryWhereInput[]
    NOT?: CholesterolHistoryWhereInput | CholesterolHistoryWhereInput[]
    userId?: IntFilter<"CholesterolHistory"> | number
    number?: IntFilter<"CholesterolHistory"> | number
    date?: DateTimeFilter<"CholesterolHistory"> | Date | string
    createdAt?: DateTimeFilter<"CholesterolHistory"> | Date | string
    updatedAt?: DateTimeFilter<"CholesterolHistory"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CholesterolHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CholesterolHistoryCountOrderByAggregateInput
    _avg?: CholesterolHistoryAvgOrderByAggregateInput
    _max?: CholesterolHistoryMaxOrderByAggregateInput
    _min?: CholesterolHistoryMinOrderByAggregateInput
    _sum?: CholesterolHistorySumOrderByAggregateInput
  }

  export type CholesterolHistoryScalarWhereWithAggregatesInput = {
    AND?: CholesterolHistoryScalarWhereWithAggregatesInput | CholesterolHistoryScalarWhereWithAggregatesInput[]
    OR?: CholesterolHistoryScalarWhereWithAggregatesInput[]
    NOT?: CholesterolHistoryScalarWhereWithAggregatesInput | CholesterolHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CholesterolHistory"> | number
    userId?: IntWithAggregatesFilter<"CholesterolHistory"> | number
    number?: IntWithAggregatesFilter<"CholesterolHistory"> | number
    date?: DateTimeWithAggregatesFilter<"CholesterolHistory"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CholesterolHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CholesterolHistory"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoods?: MealFoodCreateNestedManyWithoutUserInput
    cholesterolHistories?: CholesterolHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoods?: MealFoodUncheckedCreateNestedManyWithoutUserInput
    cholesterolHistories?: CholesterolHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoods?: MealFoodUpdateManyWithoutUserNestedInput
    cholesterolHistories?: CholesterolHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoods?: MealFoodUncheckedUpdateManyWithoutUserNestedInput
    cholesterolHistories?: CholesterolHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodCreateInput = {
    food: string
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoods?: MealFoodCreateNestedManyWithoutFoodInput
  }

  export type FoodUncheckedCreateInput = {
    id?: number
    food: string
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoods?: MealFoodUncheckedCreateNestedManyWithoutFoodInput
  }

  export type FoodUpdateInput = {
    food?: StringFieldUpdateOperationsInput | string
    caloricValue?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    saturatedFats?: FloatFieldUpdateOperationsInput | number
    monounsaturatedFats?: FloatFieldUpdateOperationsInput | number
    polyunsaturatedFats?: FloatFieldUpdateOperationsInput | number
    carbohydrates?: FloatFieldUpdateOperationsInput | number
    sugars?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    dietaryFiber?: FloatFieldUpdateOperationsInput | number
    cholesterol?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    water?: FloatFieldUpdateOperationsInput | number
    vitaminA?: FloatFieldUpdateOperationsInput | number
    vitaminB1?: FloatFieldUpdateOperationsInput | number
    vitaminB11?: FloatFieldUpdateOperationsInput | number
    vitaminB12?: FloatFieldUpdateOperationsInput | number
    vitaminB2?: FloatFieldUpdateOperationsInput | number
    vitaminB3?: FloatFieldUpdateOperationsInput | number
    vitaminB5?: FloatFieldUpdateOperationsInput | number
    vitaminB6?: FloatFieldUpdateOperationsInput | number
    vitaminC?: FloatFieldUpdateOperationsInput | number
    vitaminD?: FloatFieldUpdateOperationsInput | number
    vitaminE?: FloatFieldUpdateOperationsInput | number
    vitaminK?: FloatFieldUpdateOperationsInput | number
    calcium?: FloatFieldUpdateOperationsInput | number
    copper?: FloatFieldUpdateOperationsInput | number
    iron?: FloatFieldUpdateOperationsInput | number
    magnesium?: FloatFieldUpdateOperationsInput | number
    manganese?: FloatFieldUpdateOperationsInput | number
    phosphorus?: FloatFieldUpdateOperationsInput | number
    potassium?: FloatFieldUpdateOperationsInput | number
    selenium?: FloatFieldUpdateOperationsInput | number
    zinc?: FloatFieldUpdateOperationsInput | number
    nutritionDensity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoods?: MealFoodUpdateManyWithoutFoodNestedInput
  }

  export type FoodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    food?: StringFieldUpdateOperationsInput | string
    caloricValue?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    saturatedFats?: FloatFieldUpdateOperationsInput | number
    monounsaturatedFats?: FloatFieldUpdateOperationsInput | number
    polyunsaturatedFats?: FloatFieldUpdateOperationsInput | number
    carbohydrates?: FloatFieldUpdateOperationsInput | number
    sugars?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    dietaryFiber?: FloatFieldUpdateOperationsInput | number
    cholesterol?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    water?: FloatFieldUpdateOperationsInput | number
    vitaminA?: FloatFieldUpdateOperationsInput | number
    vitaminB1?: FloatFieldUpdateOperationsInput | number
    vitaminB11?: FloatFieldUpdateOperationsInput | number
    vitaminB12?: FloatFieldUpdateOperationsInput | number
    vitaminB2?: FloatFieldUpdateOperationsInput | number
    vitaminB3?: FloatFieldUpdateOperationsInput | number
    vitaminB5?: FloatFieldUpdateOperationsInput | number
    vitaminB6?: FloatFieldUpdateOperationsInput | number
    vitaminC?: FloatFieldUpdateOperationsInput | number
    vitaminD?: FloatFieldUpdateOperationsInput | number
    vitaminE?: FloatFieldUpdateOperationsInput | number
    vitaminK?: FloatFieldUpdateOperationsInput | number
    calcium?: FloatFieldUpdateOperationsInput | number
    copper?: FloatFieldUpdateOperationsInput | number
    iron?: FloatFieldUpdateOperationsInput | number
    magnesium?: FloatFieldUpdateOperationsInput | number
    manganese?: FloatFieldUpdateOperationsInput | number
    phosphorus?: FloatFieldUpdateOperationsInput | number
    potassium?: FloatFieldUpdateOperationsInput | number
    selenium?: FloatFieldUpdateOperationsInput | number
    zinc?: FloatFieldUpdateOperationsInput | number
    nutritionDensity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoods?: MealFoodUncheckedUpdateManyWithoutFoodNestedInput
  }

  export type FoodCreateManyInput = {
    id?: number
    food: string
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodUpdateManyMutationInput = {
    food?: StringFieldUpdateOperationsInput | string
    caloricValue?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    saturatedFats?: FloatFieldUpdateOperationsInput | number
    monounsaturatedFats?: FloatFieldUpdateOperationsInput | number
    polyunsaturatedFats?: FloatFieldUpdateOperationsInput | number
    carbohydrates?: FloatFieldUpdateOperationsInput | number
    sugars?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    dietaryFiber?: FloatFieldUpdateOperationsInput | number
    cholesterol?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    water?: FloatFieldUpdateOperationsInput | number
    vitaminA?: FloatFieldUpdateOperationsInput | number
    vitaminB1?: FloatFieldUpdateOperationsInput | number
    vitaminB11?: FloatFieldUpdateOperationsInput | number
    vitaminB12?: FloatFieldUpdateOperationsInput | number
    vitaminB2?: FloatFieldUpdateOperationsInput | number
    vitaminB3?: FloatFieldUpdateOperationsInput | number
    vitaminB5?: FloatFieldUpdateOperationsInput | number
    vitaminB6?: FloatFieldUpdateOperationsInput | number
    vitaminC?: FloatFieldUpdateOperationsInput | number
    vitaminD?: FloatFieldUpdateOperationsInput | number
    vitaminE?: FloatFieldUpdateOperationsInput | number
    vitaminK?: FloatFieldUpdateOperationsInput | number
    calcium?: FloatFieldUpdateOperationsInput | number
    copper?: FloatFieldUpdateOperationsInput | number
    iron?: FloatFieldUpdateOperationsInput | number
    magnesium?: FloatFieldUpdateOperationsInput | number
    manganese?: FloatFieldUpdateOperationsInput | number
    phosphorus?: FloatFieldUpdateOperationsInput | number
    potassium?: FloatFieldUpdateOperationsInput | number
    selenium?: FloatFieldUpdateOperationsInput | number
    zinc?: FloatFieldUpdateOperationsInput | number
    nutritionDensity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    food?: StringFieldUpdateOperationsInput | string
    caloricValue?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    saturatedFats?: FloatFieldUpdateOperationsInput | number
    monounsaturatedFats?: FloatFieldUpdateOperationsInput | number
    polyunsaturatedFats?: FloatFieldUpdateOperationsInput | number
    carbohydrates?: FloatFieldUpdateOperationsInput | number
    sugars?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    dietaryFiber?: FloatFieldUpdateOperationsInput | number
    cholesterol?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    water?: FloatFieldUpdateOperationsInput | number
    vitaminA?: FloatFieldUpdateOperationsInput | number
    vitaminB1?: FloatFieldUpdateOperationsInput | number
    vitaminB11?: FloatFieldUpdateOperationsInput | number
    vitaminB12?: FloatFieldUpdateOperationsInput | number
    vitaminB2?: FloatFieldUpdateOperationsInput | number
    vitaminB3?: FloatFieldUpdateOperationsInput | number
    vitaminB5?: FloatFieldUpdateOperationsInput | number
    vitaminB6?: FloatFieldUpdateOperationsInput | number
    vitaminC?: FloatFieldUpdateOperationsInput | number
    vitaminD?: FloatFieldUpdateOperationsInput | number
    vitaminE?: FloatFieldUpdateOperationsInput | number
    vitaminK?: FloatFieldUpdateOperationsInput | number
    calcium?: FloatFieldUpdateOperationsInput | number
    copper?: FloatFieldUpdateOperationsInput | number
    iron?: FloatFieldUpdateOperationsInput | number
    magnesium?: FloatFieldUpdateOperationsInput | number
    manganese?: FloatFieldUpdateOperationsInput | number
    phosphorus?: FloatFieldUpdateOperationsInput | number
    potassium?: FloatFieldUpdateOperationsInput | number
    selenium?: FloatFieldUpdateOperationsInput | number
    zinc?: FloatFieldUpdateOperationsInput | number
    nutritionDensity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodCreateInput = {
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMealFoodsInput
    food: FoodCreateNestedOneWithoutMealFoodsInput
  }

  export type MealFoodUncheckedCreateInput = {
    id?: number
    userId: number
    foodId: number
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodUpdateInput = {
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMealFoodsNestedInput
    food?: FoodUpdateOneRequiredWithoutMealFoodsNestedInput
  }

  export type MealFoodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodCreateManyInput = {
    id?: number
    userId: number
    foodId: number
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodUpdateManyMutationInput = {
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CholesterolHistoryCreateInput = {
    number: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCholesterolHistoriesInput
  }

  export type CholesterolHistoryUncheckedCreateInput = {
    id?: number
    userId: number
    number: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CholesterolHistoryUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCholesterolHistoriesNestedInput
  }

  export type CholesterolHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CholesterolHistoryCreateManyInput = {
    id?: number
    userId: number
    number: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CholesterolHistoryUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CholesterolHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MealFoodListRelationFilter = {
    every?: MealFoodWhereInput
    some?: MealFoodWhereInput
    none?: MealFoodWhereInput
  }

  export type CholesterolHistoryListRelationFilter = {
    every?: CholesterolHistoryWhereInput
    some?: CholesterolHistoryWhereInput
    none?: CholesterolHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MealFoodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CholesterolHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    password?: SortOrder
    email?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    weight?: SortOrder
    height?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FoodCountOrderByAggregateInput = {
    id?: SortOrder
    food?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodAvgOrderByAggregateInput = {
    id?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
  }

  export type FoodMaxOrderByAggregateInput = {
    id?: SortOrder
    food?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodMinOrderByAggregateInput = {
    id?: SortOrder
    food?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FoodSumOrderByAggregateInput = {
    id?: SortOrder
    caloricValue?: SortOrder
    fat?: SortOrder
    saturatedFats?: SortOrder
    monounsaturatedFats?: SortOrder
    polyunsaturatedFats?: SortOrder
    carbohydrates?: SortOrder
    sugars?: SortOrder
    protein?: SortOrder
    dietaryFiber?: SortOrder
    cholesterol?: SortOrder
    sodium?: SortOrder
    water?: SortOrder
    vitaminA?: SortOrder
    vitaminB1?: SortOrder
    vitaminB11?: SortOrder
    vitaminB12?: SortOrder
    vitaminB2?: SortOrder
    vitaminB3?: SortOrder
    vitaminB5?: SortOrder
    vitaminB6?: SortOrder
    vitaminC?: SortOrder
    vitaminD?: SortOrder
    vitaminE?: SortOrder
    vitaminK?: SortOrder
    calcium?: SortOrder
    copper?: SortOrder
    iron?: SortOrder
    magnesium?: SortOrder
    manganese?: SortOrder
    phosphorus?: SortOrder
    potassium?: SortOrder
    selenium?: SortOrder
    zinc?: SortOrder
    nutritionDensity?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumMealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeFilter<$PrismaModel> | $Enums.MealType
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FoodRelationFilter = {
    is?: FoodWhereInput
    isNot?: FoodWhereInput
  }

  export type MealFoodCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealFoodAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
  }

  export type MealFoodMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealFoodMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
    type?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MealFoodSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    foodId?: SortOrder
  }

  export type EnumMealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeWithAggregatesFilter<$PrismaModel> | $Enums.MealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealTypeFilter<$PrismaModel>
    _max?: NestedEnumMealTypeFilter<$PrismaModel>
  }

  export type CholesterolHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CholesterolHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
  }

  export type CholesterolHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CholesterolHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CholesterolHistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    number?: SortOrder
  }

  export type MealFoodCreateNestedManyWithoutUserInput = {
    create?: XOR<MealFoodCreateWithoutUserInput, MealFoodUncheckedCreateWithoutUserInput> | MealFoodCreateWithoutUserInput[] | MealFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutUserInput | MealFoodCreateOrConnectWithoutUserInput[]
    createMany?: MealFoodCreateManyUserInputEnvelope
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
  }

  export type CholesterolHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<CholesterolHistoryCreateWithoutUserInput, CholesterolHistoryUncheckedCreateWithoutUserInput> | CholesterolHistoryCreateWithoutUserInput[] | CholesterolHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CholesterolHistoryCreateOrConnectWithoutUserInput | CholesterolHistoryCreateOrConnectWithoutUserInput[]
    createMany?: CholesterolHistoryCreateManyUserInputEnvelope
    connect?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
  }

  export type MealFoodUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MealFoodCreateWithoutUserInput, MealFoodUncheckedCreateWithoutUserInput> | MealFoodCreateWithoutUserInput[] | MealFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutUserInput | MealFoodCreateOrConnectWithoutUserInput[]
    createMany?: MealFoodCreateManyUserInputEnvelope
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
  }

  export type CholesterolHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CholesterolHistoryCreateWithoutUserInput, CholesterolHistoryUncheckedCreateWithoutUserInput> | CholesterolHistoryCreateWithoutUserInput[] | CholesterolHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CholesterolHistoryCreateOrConnectWithoutUserInput | CholesterolHistoryCreateOrConnectWithoutUserInput[]
    createMany?: CholesterolHistoryCreateManyUserInputEnvelope
    connect?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MealFoodUpdateManyWithoutUserNestedInput = {
    create?: XOR<MealFoodCreateWithoutUserInput, MealFoodUncheckedCreateWithoutUserInput> | MealFoodCreateWithoutUserInput[] | MealFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutUserInput | MealFoodCreateOrConnectWithoutUserInput[]
    upsert?: MealFoodUpsertWithWhereUniqueWithoutUserInput | MealFoodUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MealFoodCreateManyUserInputEnvelope
    set?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    disconnect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    delete?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    update?: MealFoodUpdateWithWhereUniqueWithoutUserInput | MealFoodUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MealFoodUpdateManyWithWhereWithoutUserInput | MealFoodUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MealFoodScalarWhereInput | MealFoodScalarWhereInput[]
  }

  export type CholesterolHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<CholesterolHistoryCreateWithoutUserInput, CholesterolHistoryUncheckedCreateWithoutUserInput> | CholesterolHistoryCreateWithoutUserInput[] | CholesterolHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CholesterolHistoryCreateOrConnectWithoutUserInput | CholesterolHistoryCreateOrConnectWithoutUserInput[]
    upsert?: CholesterolHistoryUpsertWithWhereUniqueWithoutUserInput | CholesterolHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CholesterolHistoryCreateManyUserInputEnvelope
    set?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    disconnect?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    delete?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    connect?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    update?: CholesterolHistoryUpdateWithWhereUniqueWithoutUserInput | CholesterolHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CholesterolHistoryUpdateManyWithWhereWithoutUserInput | CholesterolHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CholesterolHistoryScalarWhereInput | CholesterolHistoryScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MealFoodUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MealFoodCreateWithoutUserInput, MealFoodUncheckedCreateWithoutUserInput> | MealFoodCreateWithoutUserInput[] | MealFoodUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutUserInput | MealFoodCreateOrConnectWithoutUserInput[]
    upsert?: MealFoodUpsertWithWhereUniqueWithoutUserInput | MealFoodUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MealFoodCreateManyUserInputEnvelope
    set?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    disconnect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    delete?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    update?: MealFoodUpdateWithWhereUniqueWithoutUserInput | MealFoodUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MealFoodUpdateManyWithWhereWithoutUserInput | MealFoodUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MealFoodScalarWhereInput | MealFoodScalarWhereInput[]
  }

  export type CholesterolHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CholesterolHistoryCreateWithoutUserInput, CholesterolHistoryUncheckedCreateWithoutUserInput> | CholesterolHistoryCreateWithoutUserInput[] | CholesterolHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CholesterolHistoryCreateOrConnectWithoutUserInput | CholesterolHistoryCreateOrConnectWithoutUserInput[]
    upsert?: CholesterolHistoryUpsertWithWhereUniqueWithoutUserInput | CholesterolHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CholesterolHistoryCreateManyUserInputEnvelope
    set?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    disconnect?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    delete?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    connect?: CholesterolHistoryWhereUniqueInput | CholesterolHistoryWhereUniqueInput[]
    update?: CholesterolHistoryUpdateWithWhereUniqueWithoutUserInput | CholesterolHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CholesterolHistoryUpdateManyWithWhereWithoutUserInput | CholesterolHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CholesterolHistoryScalarWhereInput | CholesterolHistoryScalarWhereInput[]
  }

  export type MealFoodCreateNestedManyWithoutFoodInput = {
    create?: XOR<MealFoodCreateWithoutFoodInput, MealFoodUncheckedCreateWithoutFoodInput> | MealFoodCreateWithoutFoodInput[] | MealFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutFoodInput | MealFoodCreateOrConnectWithoutFoodInput[]
    createMany?: MealFoodCreateManyFoodInputEnvelope
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
  }

  export type MealFoodUncheckedCreateNestedManyWithoutFoodInput = {
    create?: XOR<MealFoodCreateWithoutFoodInput, MealFoodUncheckedCreateWithoutFoodInput> | MealFoodCreateWithoutFoodInput[] | MealFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutFoodInput | MealFoodCreateOrConnectWithoutFoodInput[]
    createMany?: MealFoodCreateManyFoodInputEnvelope
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MealFoodUpdateManyWithoutFoodNestedInput = {
    create?: XOR<MealFoodCreateWithoutFoodInput, MealFoodUncheckedCreateWithoutFoodInput> | MealFoodCreateWithoutFoodInput[] | MealFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutFoodInput | MealFoodCreateOrConnectWithoutFoodInput[]
    upsert?: MealFoodUpsertWithWhereUniqueWithoutFoodInput | MealFoodUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: MealFoodCreateManyFoodInputEnvelope
    set?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    disconnect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    delete?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    update?: MealFoodUpdateWithWhereUniqueWithoutFoodInput | MealFoodUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: MealFoodUpdateManyWithWhereWithoutFoodInput | MealFoodUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: MealFoodScalarWhereInput | MealFoodScalarWhereInput[]
  }

  export type MealFoodUncheckedUpdateManyWithoutFoodNestedInput = {
    create?: XOR<MealFoodCreateWithoutFoodInput, MealFoodUncheckedCreateWithoutFoodInput> | MealFoodCreateWithoutFoodInput[] | MealFoodUncheckedCreateWithoutFoodInput[]
    connectOrCreate?: MealFoodCreateOrConnectWithoutFoodInput | MealFoodCreateOrConnectWithoutFoodInput[]
    upsert?: MealFoodUpsertWithWhereUniqueWithoutFoodInput | MealFoodUpsertWithWhereUniqueWithoutFoodInput[]
    createMany?: MealFoodCreateManyFoodInputEnvelope
    set?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    disconnect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    delete?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    connect?: MealFoodWhereUniqueInput | MealFoodWhereUniqueInput[]
    update?: MealFoodUpdateWithWhereUniqueWithoutFoodInput | MealFoodUpdateWithWhereUniqueWithoutFoodInput[]
    updateMany?: MealFoodUpdateManyWithWhereWithoutFoodInput | MealFoodUpdateManyWithWhereWithoutFoodInput[]
    deleteMany?: MealFoodScalarWhereInput | MealFoodScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMealFoodsInput = {
    create?: XOR<UserCreateWithoutMealFoodsInput, UserUncheckedCreateWithoutMealFoodsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealFoodsInput
    connect?: UserWhereUniqueInput
  }

  export type FoodCreateNestedOneWithoutMealFoodsInput = {
    create?: XOR<FoodCreateWithoutMealFoodsInput, FoodUncheckedCreateWithoutMealFoodsInput>
    connectOrCreate?: FoodCreateOrConnectWithoutMealFoodsInput
    connect?: FoodWhereUniqueInput
  }

  export type EnumMealTypeFieldUpdateOperationsInput = {
    set?: $Enums.MealType
  }

  export type UserUpdateOneRequiredWithoutMealFoodsNestedInput = {
    create?: XOR<UserCreateWithoutMealFoodsInput, UserUncheckedCreateWithoutMealFoodsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMealFoodsInput
    upsert?: UserUpsertWithoutMealFoodsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMealFoodsInput, UserUpdateWithoutMealFoodsInput>, UserUncheckedUpdateWithoutMealFoodsInput>
  }

  export type FoodUpdateOneRequiredWithoutMealFoodsNestedInput = {
    create?: XOR<FoodCreateWithoutMealFoodsInput, FoodUncheckedCreateWithoutMealFoodsInput>
    connectOrCreate?: FoodCreateOrConnectWithoutMealFoodsInput
    upsert?: FoodUpsertWithoutMealFoodsInput
    connect?: FoodWhereUniqueInput
    update?: XOR<XOR<FoodUpdateToOneWithWhereWithoutMealFoodsInput, FoodUpdateWithoutMealFoodsInput>, FoodUncheckedUpdateWithoutMealFoodsInput>
  }

  export type UserCreateNestedOneWithoutCholesterolHistoriesInput = {
    create?: XOR<UserCreateWithoutCholesterolHistoriesInput, UserUncheckedCreateWithoutCholesterolHistoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCholesterolHistoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCholesterolHistoriesNestedInput = {
    create?: XOR<UserCreateWithoutCholesterolHistoriesInput, UserUncheckedCreateWithoutCholesterolHistoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCholesterolHistoriesInput
    upsert?: UserUpsertWithoutCholesterolHistoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCholesterolHistoriesInput, UserUpdateWithoutCholesterolHistoriesInput>, UserUncheckedUpdateWithoutCholesterolHistoriesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumMealTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeFilter<$PrismaModel> | $Enums.MealType
  }

  export type NestedEnumMealTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MealType | EnumMealTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MealType[] | ListEnumMealTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMealTypeWithAggregatesFilter<$PrismaModel> | $Enums.MealType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMealTypeFilter<$PrismaModel>
    _max?: NestedEnumMealTypeFilter<$PrismaModel>
  }

  export type MealFoodCreateWithoutUserInput = {
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    food: FoodCreateNestedOneWithoutMealFoodsInput
  }

  export type MealFoodUncheckedCreateWithoutUserInput = {
    id?: number
    foodId: number
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodCreateOrConnectWithoutUserInput = {
    where: MealFoodWhereUniqueInput
    create: XOR<MealFoodCreateWithoutUserInput, MealFoodUncheckedCreateWithoutUserInput>
  }

  export type MealFoodCreateManyUserInputEnvelope = {
    data: MealFoodCreateManyUserInput | MealFoodCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CholesterolHistoryCreateWithoutUserInput = {
    number: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CholesterolHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    number: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CholesterolHistoryCreateOrConnectWithoutUserInput = {
    where: CholesterolHistoryWhereUniqueInput
    create: XOR<CholesterolHistoryCreateWithoutUserInput, CholesterolHistoryUncheckedCreateWithoutUserInput>
  }

  export type CholesterolHistoryCreateManyUserInputEnvelope = {
    data: CholesterolHistoryCreateManyUserInput | CholesterolHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MealFoodUpsertWithWhereUniqueWithoutUserInput = {
    where: MealFoodWhereUniqueInput
    update: XOR<MealFoodUpdateWithoutUserInput, MealFoodUncheckedUpdateWithoutUserInput>
    create: XOR<MealFoodCreateWithoutUserInput, MealFoodUncheckedCreateWithoutUserInput>
  }

  export type MealFoodUpdateWithWhereUniqueWithoutUserInput = {
    where: MealFoodWhereUniqueInput
    data: XOR<MealFoodUpdateWithoutUserInput, MealFoodUncheckedUpdateWithoutUserInput>
  }

  export type MealFoodUpdateManyWithWhereWithoutUserInput = {
    where: MealFoodScalarWhereInput
    data: XOR<MealFoodUpdateManyMutationInput, MealFoodUncheckedUpdateManyWithoutUserInput>
  }

  export type MealFoodScalarWhereInput = {
    AND?: MealFoodScalarWhereInput | MealFoodScalarWhereInput[]
    OR?: MealFoodScalarWhereInput[]
    NOT?: MealFoodScalarWhereInput | MealFoodScalarWhereInput[]
    id?: IntFilter<"MealFood"> | number
    userId?: IntFilter<"MealFood"> | number
    foodId?: IntFilter<"MealFood"> | number
    type?: EnumMealTypeFilter<"MealFood"> | $Enums.MealType
    time?: DateTimeFilter<"MealFood"> | Date | string
    createdAt?: DateTimeFilter<"MealFood"> | Date | string
    updatedAt?: DateTimeFilter<"MealFood"> | Date | string
  }

  export type CholesterolHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: CholesterolHistoryWhereUniqueInput
    update: XOR<CholesterolHistoryUpdateWithoutUserInput, CholesterolHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<CholesterolHistoryCreateWithoutUserInput, CholesterolHistoryUncheckedCreateWithoutUserInput>
  }

  export type CholesterolHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: CholesterolHistoryWhereUniqueInput
    data: XOR<CholesterolHistoryUpdateWithoutUserInput, CholesterolHistoryUncheckedUpdateWithoutUserInput>
  }

  export type CholesterolHistoryUpdateManyWithWhereWithoutUserInput = {
    where: CholesterolHistoryScalarWhereInput
    data: XOR<CholesterolHistoryUpdateManyMutationInput, CholesterolHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type CholesterolHistoryScalarWhereInput = {
    AND?: CholesterolHistoryScalarWhereInput | CholesterolHistoryScalarWhereInput[]
    OR?: CholesterolHistoryScalarWhereInput[]
    NOT?: CholesterolHistoryScalarWhereInput | CholesterolHistoryScalarWhereInput[]
    id?: IntFilter<"CholesterolHistory"> | number
    userId?: IntFilter<"CholesterolHistory"> | number
    number?: IntFilter<"CholesterolHistory"> | number
    date?: DateTimeFilter<"CholesterolHistory"> | Date | string
    createdAt?: DateTimeFilter<"CholesterolHistory"> | Date | string
    updatedAt?: DateTimeFilter<"CholesterolHistory"> | Date | string
  }

  export type MealFoodCreateWithoutFoodInput = {
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMealFoodsInput
  }

  export type MealFoodUncheckedCreateWithoutFoodInput = {
    id?: number
    userId: number
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodCreateOrConnectWithoutFoodInput = {
    where: MealFoodWhereUniqueInput
    create: XOR<MealFoodCreateWithoutFoodInput, MealFoodUncheckedCreateWithoutFoodInput>
  }

  export type MealFoodCreateManyFoodInputEnvelope = {
    data: MealFoodCreateManyFoodInput | MealFoodCreateManyFoodInput[]
    skipDuplicates?: boolean
  }

  export type MealFoodUpsertWithWhereUniqueWithoutFoodInput = {
    where: MealFoodWhereUniqueInput
    update: XOR<MealFoodUpdateWithoutFoodInput, MealFoodUncheckedUpdateWithoutFoodInput>
    create: XOR<MealFoodCreateWithoutFoodInput, MealFoodUncheckedCreateWithoutFoodInput>
  }

  export type MealFoodUpdateWithWhereUniqueWithoutFoodInput = {
    where: MealFoodWhereUniqueInput
    data: XOR<MealFoodUpdateWithoutFoodInput, MealFoodUncheckedUpdateWithoutFoodInput>
  }

  export type MealFoodUpdateManyWithWhereWithoutFoodInput = {
    where: MealFoodScalarWhereInput
    data: XOR<MealFoodUpdateManyMutationInput, MealFoodUncheckedUpdateManyWithoutFoodInput>
  }

  export type UserCreateWithoutMealFoodsInput = {
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cholesterolHistories?: CholesterolHistoryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMealFoodsInput = {
    id?: number
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cholesterolHistories?: CholesterolHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMealFoodsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMealFoodsInput, UserUncheckedCreateWithoutMealFoodsInput>
  }

  export type FoodCreateWithoutMealFoodsInput = {
    food: string
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodUncheckedCreateWithoutMealFoodsInput = {
    id?: number
    food: string
    caloricValue: number
    fat: number
    saturatedFats: number
    monounsaturatedFats: number
    polyunsaturatedFats: number
    carbohydrates: number
    sugars: number
    protein: number
    dietaryFiber: number
    cholesterol: number
    sodium: number
    water: number
    vitaminA: number
    vitaminB1: number
    vitaminB11: number
    vitaminB12: number
    vitaminB2: number
    vitaminB3: number
    vitaminB5: number
    vitaminB6: number
    vitaminC: number
    vitaminD: number
    vitaminE: number
    vitaminK: number
    calcium: number
    copper: number
    iron: number
    magnesium: number
    manganese: number
    phosphorus: number
    potassium: number
    selenium: number
    zinc: number
    nutritionDensity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FoodCreateOrConnectWithoutMealFoodsInput = {
    where: FoodWhereUniqueInput
    create: XOR<FoodCreateWithoutMealFoodsInput, FoodUncheckedCreateWithoutMealFoodsInput>
  }

  export type UserUpsertWithoutMealFoodsInput = {
    update: XOR<UserUpdateWithoutMealFoodsInput, UserUncheckedUpdateWithoutMealFoodsInput>
    create: XOR<UserCreateWithoutMealFoodsInput, UserUncheckedCreateWithoutMealFoodsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMealFoodsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMealFoodsInput, UserUncheckedUpdateWithoutMealFoodsInput>
  }

  export type UserUpdateWithoutMealFoodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cholesterolHistories?: CholesterolHistoryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMealFoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cholesterolHistories?: CholesterolHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FoodUpsertWithoutMealFoodsInput = {
    update: XOR<FoodUpdateWithoutMealFoodsInput, FoodUncheckedUpdateWithoutMealFoodsInput>
    create: XOR<FoodCreateWithoutMealFoodsInput, FoodUncheckedCreateWithoutMealFoodsInput>
    where?: FoodWhereInput
  }

  export type FoodUpdateToOneWithWhereWithoutMealFoodsInput = {
    where?: FoodWhereInput
    data: XOR<FoodUpdateWithoutMealFoodsInput, FoodUncheckedUpdateWithoutMealFoodsInput>
  }

  export type FoodUpdateWithoutMealFoodsInput = {
    food?: StringFieldUpdateOperationsInput | string
    caloricValue?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    saturatedFats?: FloatFieldUpdateOperationsInput | number
    monounsaturatedFats?: FloatFieldUpdateOperationsInput | number
    polyunsaturatedFats?: FloatFieldUpdateOperationsInput | number
    carbohydrates?: FloatFieldUpdateOperationsInput | number
    sugars?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    dietaryFiber?: FloatFieldUpdateOperationsInput | number
    cholesterol?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    water?: FloatFieldUpdateOperationsInput | number
    vitaminA?: FloatFieldUpdateOperationsInput | number
    vitaminB1?: FloatFieldUpdateOperationsInput | number
    vitaminB11?: FloatFieldUpdateOperationsInput | number
    vitaminB12?: FloatFieldUpdateOperationsInput | number
    vitaminB2?: FloatFieldUpdateOperationsInput | number
    vitaminB3?: FloatFieldUpdateOperationsInput | number
    vitaminB5?: FloatFieldUpdateOperationsInput | number
    vitaminB6?: FloatFieldUpdateOperationsInput | number
    vitaminC?: FloatFieldUpdateOperationsInput | number
    vitaminD?: FloatFieldUpdateOperationsInput | number
    vitaminE?: FloatFieldUpdateOperationsInput | number
    vitaminK?: FloatFieldUpdateOperationsInput | number
    calcium?: FloatFieldUpdateOperationsInput | number
    copper?: FloatFieldUpdateOperationsInput | number
    iron?: FloatFieldUpdateOperationsInput | number
    magnesium?: FloatFieldUpdateOperationsInput | number
    manganese?: FloatFieldUpdateOperationsInput | number
    phosphorus?: FloatFieldUpdateOperationsInput | number
    potassium?: FloatFieldUpdateOperationsInput | number
    selenium?: FloatFieldUpdateOperationsInput | number
    zinc?: FloatFieldUpdateOperationsInput | number
    nutritionDensity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FoodUncheckedUpdateWithoutMealFoodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    food?: StringFieldUpdateOperationsInput | string
    caloricValue?: FloatFieldUpdateOperationsInput | number
    fat?: FloatFieldUpdateOperationsInput | number
    saturatedFats?: FloatFieldUpdateOperationsInput | number
    monounsaturatedFats?: FloatFieldUpdateOperationsInput | number
    polyunsaturatedFats?: FloatFieldUpdateOperationsInput | number
    carbohydrates?: FloatFieldUpdateOperationsInput | number
    sugars?: FloatFieldUpdateOperationsInput | number
    protein?: FloatFieldUpdateOperationsInput | number
    dietaryFiber?: FloatFieldUpdateOperationsInput | number
    cholesterol?: FloatFieldUpdateOperationsInput | number
    sodium?: FloatFieldUpdateOperationsInput | number
    water?: FloatFieldUpdateOperationsInput | number
    vitaminA?: FloatFieldUpdateOperationsInput | number
    vitaminB1?: FloatFieldUpdateOperationsInput | number
    vitaminB11?: FloatFieldUpdateOperationsInput | number
    vitaminB12?: FloatFieldUpdateOperationsInput | number
    vitaminB2?: FloatFieldUpdateOperationsInput | number
    vitaminB3?: FloatFieldUpdateOperationsInput | number
    vitaminB5?: FloatFieldUpdateOperationsInput | number
    vitaminB6?: FloatFieldUpdateOperationsInput | number
    vitaminC?: FloatFieldUpdateOperationsInput | number
    vitaminD?: FloatFieldUpdateOperationsInput | number
    vitaminE?: FloatFieldUpdateOperationsInput | number
    vitaminK?: FloatFieldUpdateOperationsInput | number
    calcium?: FloatFieldUpdateOperationsInput | number
    copper?: FloatFieldUpdateOperationsInput | number
    iron?: FloatFieldUpdateOperationsInput | number
    magnesium?: FloatFieldUpdateOperationsInput | number
    manganese?: FloatFieldUpdateOperationsInput | number
    phosphorus?: FloatFieldUpdateOperationsInput | number
    potassium?: FloatFieldUpdateOperationsInput | number
    selenium?: FloatFieldUpdateOperationsInput | number
    zinc?: FloatFieldUpdateOperationsInput | number
    nutritionDensity?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutCholesterolHistoriesInput = {
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoods?: MealFoodCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCholesterolHistoriesInput = {
    id?: number
    name: string
    password: string
    email?: string | null
    birthdate?: Date | string | null
    gender?: $Enums.Gender | null
    weight?: number | null
    height?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    mealFoods?: MealFoodUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCholesterolHistoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCholesterolHistoriesInput, UserUncheckedCreateWithoutCholesterolHistoriesInput>
  }

  export type UserUpsertWithoutCholesterolHistoriesInput = {
    update: XOR<UserUpdateWithoutCholesterolHistoriesInput, UserUncheckedUpdateWithoutCholesterolHistoriesInput>
    create: XOR<UserCreateWithoutCholesterolHistoriesInput, UserUncheckedCreateWithoutCholesterolHistoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCholesterolHistoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCholesterolHistoriesInput, UserUncheckedUpdateWithoutCholesterolHistoriesInput>
  }

  export type UserUpdateWithoutCholesterolHistoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoods?: MealFoodUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCholesterolHistoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    height?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mealFoods?: MealFoodUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MealFoodCreateManyUserInput = {
    id?: number
    foodId: number
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CholesterolHistoryCreateManyUserInput = {
    id?: number
    number: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodUpdateWithoutUserInput = {
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    food?: FoodUpdateOneRequiredWithoutMealFoodsNestedInput
  }

  export type MealFoodUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    foodId?: IntFieldUpdateOperationsInput | number
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CholesterolHistoryUpdateWithoutUserInput = {
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CholesterolHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CholesterolHistoryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodCreateManyFoodInput = {
    id?: number
    userId: number
    type: $Enums.MealType
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MealFoodUpdateWithoutFoodInput = {
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMealFoodsNestedInput
  }

  export type MealFoodUncheckedUpdateWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MealFoodUncheckedUpdateManyWithoutFoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumMealTypeFieldUpdateOperationsInput | $Enums.MealType
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodCountOutputTypeDefaultArgs instead
     */
    export type FoodCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FoodCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FoodDefaultArgs instead
     */
    export type FoodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FoodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MealFoodDefaultArgs instead
     */
    export type MealFoodArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MealFoodDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CholesterolHistoryDefaultArgs instead
     */
    export type CholesterolHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CholesterolHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}